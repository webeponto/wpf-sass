//?	Vars (WPF3)
//!	Lógica para gerenciamento de classes WPF baseada em variáveis:

//* Instâncias: extensões da folha de estilos.
@use "../../vars/default" 	    as var;
@use "../../vars/dark" 	        as dark;
@use "../../vars/config"        as config;
@use "mix" 					    as mix;

@use "sass:color";
@use "sass:math";
@use "sass:string";
@use "sass:map";

//? NEGAÇÃO DE CORES:
//? --------------------------------------------------------------------------------------------------------//

.bg\(transparent\) {
    background-color: transparent!important;
}

.bc\(transparent\) {
    border-color: transparent!important;
}

.c\(transparent\) {
    color: transparent!important;
}

.f\(transparent\) {
    fill: transparent!important;
}

.f\*\(transparent\) {
    *{
        fill: transparent!important;
    }
}

.s\(transparent\) {
    stroke: transparent!important;
}

.s\*\(transparent\) {
    *{
        stroke: transparent!important;
    }
}

//? CONFIGURAÇÃO DE CORES: [https://webeponto.notion.site/Vari-veis-do-WPF-909d92a226844eac9177d776bf51fc61]
//? --------------------------------------------------------------------------------------------------------//

//* Cores de Plano de Fundo:
@each $color, $value in var.$c-backgrounds {
	.bg\(#{$color}\) {
		@if(string.index($value, "url"))
		{
        	background-image: var(--#{$color})!important;
		}

		@else
		{
			background-color: var(--#{$color})!important;
		}
    }

	.bc\(#{$color}\) {
		@if(string.index($value, "url"))
		{
        	border-image: var(--#{$color})!important;
		}

		@else
		{
			border-color: var(--#{$color})!important;
		}
	}

	.c\(#{$color}\) {
		color: var(--#{$color})!important;
	}

    .f\(#{$color}\) {
		fill: var(--#{$color})!important;
	}

    .f\*\(#{$color}\) {
        *{
            fill: var(--#{$color})!important;
        }
	}

    .s\(#{$color}\) {
		stroke: var(--#{$color})!important;
	}

    .s\*\(#{$color}\) {
        *{
            stroke: var(--#{$color})!important;
        }
    }

	@include mix.responsive()
	{
		.mob\:bg\(#{$color}\) {
			@if(string.index($value, "url"))
			{
				background-image: var(--#{$color})!important;
			}

			@else
			{
				background-color: var(--#{$color})!important;
			}
		}

		.mob\:bc\(#{$color}\) {
            @if(string.index($value, "url"))
			{
				border-image: var(--#{$color})!important;
			}

			@else
			{
				border-color: var(--#{$color})!important;
			}
        }

		.mob\:c\(#{$color}\) {
            color: var(--#{$color})!important;
        }

        .mob\:f\(#{$color}\) {
            fill: var(--#{$color})!important;
        }

        .mob\:f\*\(#{$color}\) {
            *{
                fill: var(--#{$color})!important;
            }
        }

        .mob\:s\(#{$color}\) {
            stroke: var(--#{$color})!important;
        }

        .mob\:s\*\(#{$color}\) {
            *{
                stroke: var(--#{$color})!important;
            }
        }
	}

	:root{
		--#{$color}: #{string.unquote($value)};
	}

    @if config.$hasDarkTheme {
        html.dark-theme{
            --#{$color}: #{map.get(dark.$c-backgrounds-dark, "#{$color}")};
        }
    }
}

//* Cores de Superfície:
@each $color, $value in var.$c-surfaces {
	.bg\(#{$color}\) {
        background-color: var(--#{$color})!important;
    }

	.bc\(#{$color}\) {
		border-color: var(--#{$color})!important;
	}

	.c\(#{$color}\) {
		color: var(--#{$color})!important;
	}

    .f\(#{$color}\) {
		fill: var(--#{$color})!important;
	}

    .f\*\(#{$color}\) {
        *{
            fill: var(--#{$color})!important;
        }
	}

    .s\(#{$color}\) {
		stroke: var(--#{$color})!important;
	}

    .s\*\(#{$color}\) {
        *{
            stroke: var(--#{$color})!important;
        }
    }

	@include mix.responsive()
	{
		.mob\:bg\(#{$color}\) {
			background-color: var(--#{$color})!important;
		}

		.mob\:bc\(#{$color}\) {
            border-color: var(--#{$color})!important;
        }

		.mob\:c\(#{$color}\) {
            color: var(--#{$color})!important;
        }

        .mob\:f\(#{$color}\) {
            fill: var(--#{$color})!important;
        }

        .mob\:f\*\(#{$color}\) {
            *{
                fill: var(--#{$color})!important;
            }
        }

        .mob\:s\(#{$color}\) {
            stroke: var(--#{$color})!important;
        }

        .mob\:s\*\(#{$color}\) {
            *{
                stroke: var(--#{$color})!important;
            }
        }
	}

	:root{
		--#{$color}: #{string.unquote($value)};
	}

    @if config.$hasDarkTheme {
        html.dark-theme{
            --#{$color}: #{map.get(dark.$c-surfaces-dark, "#{$color}")};
        }
    }
}

//* Cores de Gradiente:
@each $color, $value in var.$c-gradients {
    .bg\(#{$color}\) {
        background: var(--#{$color})!important;
    }

	.bc\(#{$color}\) {
		border-image: var(--#{$color})!important;
	}

	.c\(#{$color}\) {
		background: var(--#{$color})!important;

		color: none!important;

		background-clip: text!important;
        -webkit-background-clip: text!important;
  		-webkit-text-fill-color: transparent!important;
	}

    /*
		As propriedades fill e stroke não são compatíveis com valores de gradiente
	*/

	@include mix.responsive()
	{
		.mob\:bg\(#{$color}\) {
			background: var(--#{$color})!important;
		}

		.mob\:bc\(#{$color}\) {
            border-image: var(--#{$color})!important;
        }

		.mob\:c\(#{$color}\) {
            background: var(--#{$color})!important;

			color: none!important;

			background-clip: text!important;
            -webkit-background-clip: text!important;
			-webkit-text-fill-color: transparent!important;
        }

        /*
			As propriedades fill e stroke não são compatíveis com valores de gradiente
		*/
	}

	:root{
        --#{$color}: #{string.unquote($value)};
    }

	@if config.$hasDarkTheme {
        html.dark-theme{
            --#{$color}: #{map.get(dark.$c-gradients-dark, "#{$color}")};
        }
    }
}

//* Cores Temas:
@each $color, $value in var.$c-themes {
    .bg\(#{$color}\) {
        background-color: var(--#{$color})!important;
    }

	.bc\(#{$color}\) {
		border-color: var(--#{$color})!important;
	}

	.c\(#{$color}\) {
		color: var(--#{$color})!important;
	}

    .f\(#{$color}\) {
		fill: var(--#{$color})!important;
	}

    .f\*\(#{$color}\) {
        *{
            fill: var(--#{$color})!important;
        }
	}

    .s\(#{$color}\) {
		stroke: var(--#{$color})!important;
	}

    .s\*\(#{$color}\) {
        *{
            stroke: var(--#{$color})!important;
        }
    }

	@include mix.responsive()
	{
		.mob\:bg\(#{$color}\) {
			background-color: var(--#{$color})!important;
		}

		.mob\:bc\(#{$color}\) {
            border-color: var(--#{$color})!important;
        }

		.mob\:c\(#{$color}\) {
            color: var(--#{$color})!important;
        }

        .mob\:f\(#{$color}\) {
            fill: var(--#{$color})!important;
        }

        .mob\:f\*\(#{$color}\) {
            *{
                fill: var(--#{$color})!important;
            }
        }

        .mob\:s\(#{$color}\) {
            stroke: var(--#{$color})!important;
        }

        .mob\:s\*\(#{$color}\) {
            *{
                stroke: var(--#{$color})!important;
            }
        }
	}

	:root{
        --#{$color}: #{string.unquote($value)};
    }

	@if config.$hasDarkTheme {
        html.dark-theme{
            --#{$color}: #{map.get(dark.$c-themes-dark, "#{$color}")};
        }
    }
}

//* Cores de Texto:
@each $color, $value in var.$c-strings {
    .bg\(#{$color}\) {
        background-color: var(--#{$color})!important;
    }

	.bc\(#{$color}\) {
		border-color: var(--#{$color})!important;
	}

	.c\(#{$color}\) {
		color: var(--#{$color})!important;
	}

    .f\(#{$color}\) {
		fill: var(--#{$color})!important;
	}

    .f\*\(#{$color}\) {
        *{
            fill: var(--#{$color})!important;
        }
	}

    .s\(#{$color}\) {
		stroke: var(--#{$color})!important;
	}

    .s\*\(#{$color}\) {
        *{
            stroke: var(--#{$color})!important;
        }
    }

	@include mix.responsive()
	{
		.mob\:bg\(#{$color}\) {
			background-color: var(--#{$color})!important;
		}

		.mob\:bc\(#{$color}\) {
            border-color: var(--#{$color})!important;
        }

		.mob\:c\(#{$color}\) {
            color: var(--#{$color})!important;
        }

        .mob\:f\(#{$color}\) {
            fill: var(--#{$color})!important;
        }

        .mob\:f\*\(#{$color}\) {
            *{
                fill: var(--#{$color})!important;
            }
        }

        .mob\:s\(#{$color}\) {
            stroke: var(--#{$color})!important;
        }

        .mob\:s\*\(#{$color}\) {
            *{
                stroke: var(--#{$color})!important;
            }
        }
	}

	:root{
        --#{$color}: #{string.unquote($value)};
    }

	@if config.$hasDarkTheme {
        html.dark-theme{
            --#{$color}: #{map.get(dark.$c-strings-dark, "#{$color}")};
        }
    }
}

//* Cores de Borda:
@each $color, $value in var.$c-borders {
    .bg\(#{$color}\) {
        background-color: var(--#{$color})!important;
    }

	.bc\(#{$color}\) {
		border-color: var(--#{$color})!important;
	}

	.c\(#{$color}\) {
		color: var(--#{$color})!important;
	}

    .f\(#{$color}\) {
		fill: var(--#{$color})!important;
	}

    .f\*\(#{$color}\) {
        *{
            fill: var(--#{$color})!important;
        }
	}

    .s\(#{$color}\) {
		stroke: var(--#{$color})!important;
	}

    .s\*\(#{$color}\) {
        *{
            stroke: var(--#{$color})!important;
        }
    }

	@include mix.responsive()
	{
		.mob\:bg\(#{$color}\) {
			background-color: var(--#{$color})!important;
		}

		.mob\:bc\(#{$color}\) {
            border-color: var(--#{$color})!important;
        }

		.mob\:c\(#{$color}\) {
            color: var(--#{$color})!important;
        }

        .mob\:f\(#{$color}\) {
            fill: var(--#{$color})!important;
        }

        .mob\:f\*\(#{$color}\) {
            *{
                fill: var(--#{$color})!important;
            }
        }

        .mob\:s\(#{$color}\) {
            stroke: var(--#{$color})!important;
        }

        .mob\:s\*\(#{$color}\) {
            *{
                stroke: var(--#{$color})!important;
            }
        }
	}

	:root{
        --#{$color}: #{string.unquote($value)};
    }

	@if config.$hasDarkTheme {
        html.dark-theme{
            --#{$color}: #{map.get(dark.$c-borders-dark, "#{$color}")};
        }
    }
}

//* Cores Indicadoras:
@each $color, $value in var.$c-indicators {
    .bg\(#{$color}\) {
        background-color: var(--#{$color})!important;
    }

	.bc\(#{$color}\) {
		border-color: var(--#{$color})!important;
	}

	.c\(#{$color}\) {
		color: var(--#{$color})!important;
	}

    .f\(#{$color}\) {
		fill: var(--#{$color})!important;
	}

    .f\*\(#{$color}\) {
        *{
            fill: var(--#{$color})!important;
        }
	}

    .s\(#{$color}\) {
		stroke: var(--#{$color})!important;
	}

    .s\*\(#{$color}\) {
        *{
            stroke: var(--#{$color})!important;
        }
    }

	@include mix.responsive()
	{
		.mob\:bg\(#{$color}\) {
			background-color: var(--#{$color})!important;
		}

		.mob\:bc\(#{$color}\) {
            border-color: var(--#{$color})!important;
        }

		.mob\:c\(#{$color}\) {
            color: var(--#{$color})!important;
        }

        .mob\:f\(#{$color}\) {
            fill: var(--#{$color})!important;
        }

        .mob\:f\*\(#{$color}\) {
            *{
                fill: var(--#{$color})!important;
            }
        }

        .mob\:s\(#{$color}\) {
            stroke: var(--#{$color})!important;
        }

        .mob\:s\*\(#{$color}\) {
            *{
                stroke: var(--#{$color})!important;
            }
        }
	}

	:root{
        --#{$color}: #{string.unquote($value)};
    }

	@if config.$hasDarkTheme {
        html.dark-theme{
            --#{$color}: #{map.get(dark.$c-indicators-dark, "#{$color}")};
        }
    }
}

//? CONFIGURAÇÃO DE ELEVAÇÕES: [https://webeponto.notion.site/Vari-veis-do-WPF-909d92a226844eac9177d776bf51fc61]
//? --------------------------------------------------------------------------------------------------------//

//* Elevações de Superfícies:
@each $color, $value in var.$c-surface-elevations {
    .bg\(#{$color}\) {
        background-color: $value;
    }

	.bc\(#{$color}\) {
		border-color: $value!important;
	}

	.c\(#{$color}\) {
		color: $value;
	}

	@include mix.responsive()
	{
		.mob\:bg\(#{$color}\) {
			background-color: $value;
		}

		.mob\:bc\(#{$color}\) {
            border-color: $value!important;
        }

		.mob\:c\(#{$color}\) {
            color: $value;
        }
	}

	:root{
        --#{$color}: #{$value};
    }

	@if config.$hasDarkTheme {
        html.dark-theme{
            --#{$color}: #{map.get(dark.$c-surface-elevations-dark, "#{$color}")};
        }
    }
}

//* Elevações Primárias:
@each $color, $value in var.$c-primary-elevations {
    .bg\(#{$color}\) {
        background-color: $value;
    }

	.bc\(#{$color}\) {
		border-color: $value!important;
	}

	.c\(#{$color}\) {
		color: $value;
	}

	@include mix.responsive()
	{
		.mob\:bg\(#{$color}\) {
			background-color: $value;
		}

		.mob\:bc\(#{$color}\) {
            border-color: $value!important;
        }

		.mob\:c\(#{$color}\) {
            color: $value;
        }
	}

	:root{
        --#{$color}: #{$value};
    }

	@if config.$hasDarkTheme {
        html.dark-theme{
            --#{$color}: #{map.get(dark.$c-primary-elevations-dark, "#{$color}")};
        }
    }
}

//? CONFIGURAÇÃO DE FONTES: [https://webeponto.notion.site/Vari-veis-do-WPF-909d92a226844eac9177d776bf51fc61]
//? --------------------------------------------------------------------------------------------------------//

//* Família de Fontes:
@each $font, $value in var.$fonts {
    .fnt\(#{$font}\) {
        font-family: var(--#{$font})!important;
    }

	@include mix.responsive()
	{
		.mob\:fnt\(#{$font}\) {
			font-family: var(--#{$font})!important;
		}
	}

	:root{
        --#{$font}: #{string.unquote($value)};
    }
}

//* Peso de Fontes:
@each $weight, $value in var.$font-weights {
    .fnt\(#{$weight}\) {
        font-weight: $value;
    }

	@include mix.responsive()
	{
		.mob\:fnt\(#{$weight}\) {
			font-weight: $value;
		}
	}

	:root{
        --#{$weight}: #{$value};
    }
}

//? CONFIGURAÇÃO DE CURSORES: [https://webeponto.notion.site/Cursores-12f605114bde45e1a55af00954299f65]
//? --------------------------------------------------------------------------------------------------------//

//* Tipo de Cursor:
@each $cursor, $value in var.$mouse-cursors {
    .#{$cursor} {
        cursor: var(--#{$cursor})!important;
    }

	:root{
        --#{$cursor}: #{string.unquote($value)};
    }

	@if config.$hasDarkTheme {
        html.dark-theme{
            --#{$cursor}: #{map.get(dark.$c-mouse-cursors-dark, "#{$cursor}")};
        }
    }
}

//? CONFIGURAÇÃO DE EFEITOS: [https://webeponto.notion.site/Vari-veis-do-WPF-909d92a226844eac9177d776bf51fc61]
//? --------------------------------------------------------------------------------------------------------//

//* Tipo de Efeito:
@each $vfx, $value in var.$visual-effects {
    .fx\(#{$vfx}\) {
        filter: var(--#{$vfx})!important;
		will-change: filter;
    }

	.fx\(bs\,#{$vfx}\){
        box-shadow: var(--#{$vfx})!important;
    }

	.fx\(ts\,#{$vfx}\){
        text-shadow: var(--#{$vfx})!important;
    }

	:root{
        --#{$vfx}: #{string.unquote($value)};
    }
}

//? TRANSIÇÕES: [https://webeponto.notion.site/Vari-veis-do-WPF-909d92a226844eac9177d776bf51fc61]
//? --------------------------------------------------------------------------------------------------------//

//* Duração:
@each $t, $value in var.$transitions {
    .#{$t} {
        transition: var(--#{$t})!important;
    }

	:root{
        --#{$t}: #{string.unquote($value)};
    }
}
