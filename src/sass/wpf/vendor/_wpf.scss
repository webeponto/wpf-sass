//?	FRAMEWORK SCSS WPF 2
/***
	* Versão v2.3.0 do Framework SCSS WPF
	* Autores: Lyautey M. N. / Matheus P. / David H.
	* 
	* ! Não altere nada presente neste documento.
	* ! Erros fatais no funcionamento da ferramenta podem acontecer em caso de alterações não planejadas.
	*
	* ? DOCUMENTAÇÃO DO PROJETO: [https://webeponto.notion.site/WPF-bbc0a45af56640898b8de57ecaa81676]
*/

//* Instâncias: extensões da folha de estilos. 
@use "mix" as mix;
@use "sass:color";
@use "sass:math";

//? CONSTANTES DO SISTEMA [https://webeponto.notion.site/Constantes-do-WPF-7436d17652944813bc2397eeaa2ddc02]:
//? --------------------------------------------------------------------------------------------------------//

//* Páginas:
$pg-maxwidth: 1900px;
$pg-hdm-zoom: 120%;

//* Tamanho do REM:
$s-rem: 16px;

//? CONFIGURAÇÃO DO FRAMEWORK:
//? --------------------------------------------------------------------------------------------------------//
//* Zoom:
@include mix.responsive(1500px, min) {
	html.hdm-zoom {
		zoom: $pg-hdm-zoom;
	}
}

//* Inativador: [https://webeponto.notion.site/Inativadores-946fec746aa74cf28b5e8844fe1e5bff]
.hidden {
	display: none !important;
}

.\! {
    &hidden {
        display: none !important;
    }
}

@include mix.responsive() {
    .mob\:hidden {
        display: none !important;
    }
    
    .mob\:\! {
        &hidden {
            display: none !important;
        }
    }
}

//* Posicionamento: [https://webeponto.notion.site/Posicionamento-d96cf6193d484249979bd186b767b7c6]
$positions: static, sticky, relative, absolute, fixed;
$sides: top, right, bottom, left;

// Versão original
@each $position in $positions {
    .#{$position} {
        position: $position;

        @if $position == relative or $position == absolute or $position == fixed {
            @each $side in $sides {
                @for $pos from -100 through 100 {
                    .#{$side}\(#{$pos}\) {
                        #{$side}: #{$pos * 1%};
                    }

                    @include mix.responsive() {
                        .mob\:#{$side}\(#{$pos}\) {
                            #{$side}: #{$pos * 1%};
                        }
                    }
                }

                @for $pos from -200 through 200 {
                    .#{$side}\(#{$pos}px\) {
                        #{$side}: #{$pos * 1px};
                    }

                    @include mix.responsive() {
                        .mob\:#{$side}\(#{$pos}px\) {
                            #{$side}: #{$pos * 1px};
                        }
                    }
                }

                @for $pos from -100 through 100 {
                    .#{$side}\(#{$pos}dvh\) {
                        #{$side}: #{$pos * 1dvh};
                    }

                    @include mix.responsive() {
                        .mob\:#{$side}\(#{$pos}dvh\) {
                            #{$side}: #{$pos * 1dvh};
                        }
                    }
                }

                @for $pos from -100 through 100 {
                    .#{$side}\(#{$pos}dvw\) {
                        #{$side}: #{$pos * 1dvw};
                    }

                    @include mix.responsive() {
                        .mob\:#{$side}\(#{$pos}dvw\) {
                            #{$side}: #{$pos * 1dvw};
                        }
                    }
                }
            }

            @for $pos from -100 through 100 {
                .inset\(#{$pos}\) {
                    inset: #{$pos * 1%};
                }

                @include mix.responsive() {
                    .mob\:inset\(#{$pos}\) {
                        inset: #{$pos * 1%};
                    }
                }
            }

            @for $pos from -200 through 200 {
                .inset\(#{$pos}px\) {
                    inset: #{$pos * 1px};
                }

                @include mix.responsive() {
                    .mob\:inset\(#{$pos}px\) {
                        inset: #{$pos * 1px};
                    }
                }
            }

            @for $pos from -100 through 100 {
                .inset\(#{$pos}dvh\) {
                    inset: #{$pos * 1dvh};
                }

                @include mix.responsive() {
                    .mob\:inset\(#{$pos}dvh\) {
                        inset: #{$pos * 1dvh};
                    }
                }
            }

            @for $pos from -100 through 100 {
                .inset\(#{$pos}dvw\) {
                    inset: #{$pos * 1dvw};
                }

                @include mix.responsive() {
                    .mob\:inset\(#{$pos}dvw\) {
                        inset: #{$pos * 1dvw};
                    }
                }
            }
        }

        .center {
            &\(h\) {
                left: 50%;
                transform: translateX(-50%);
            }

            &\(v\) {
                top: 50%;
                transform: translateY(-50%);
            }

            &\(c\) {
                left: 50%;
                top: 50%;
                transform: translateX(-50%) translateY(-50%);
            }
        }

        @include mix.responsive() {
            .mob\:center {
                &\(h\) {
                    left: 50%;
                    transform: translateX(-50%);
                }

                &\(v\) {
                    top: 50%;
                    transform: translateY(-50%);
                }

                &\(c\) {
                    left: 50%;
                    top: 50%;
                    transform: translateX(-50%) translateY(-50%);
                }
            }
        }
    }

    @include mix.responsive() {
        .mob\: {
            &#{$position} {
                position: $position;

                @if $position == relative or $position == absolute or $position == fixed {
                    @each $side in $sides {
                        @for $pos from 0 through 100 {
                            .#{$side}\(#{$pos}\) {
                                #{$side}: #{$pos * 1%};
                            }
                        }

                        @for $pos from 0 through 200 {
                            .#{$side}\(#{$pos}px\) {
                                #{$side}: #{$pos * 1px};
                            }
                        }
                    }
                }

                .center {
                    &\(h\) {
                        left: 50%;
                        transform: translateX(-50%);
                    }

                    &\(v\) {
                        top: 50%;
                        transform: translateY(-50%);
                    }

                    &\(c\) {
                        left: 50%;
                        top: 50%;
                        transform: translateX(-50%) translateY(-50%);
                    }
                }
            }
        }
    }
}

// Versão com !important
.\! {
    @each $position in $positions {
        &#{$position} {
            position: $position !important;

            @if $position == relative or $position == absolute or $position == fixed {
                @each $side in $sides {
                    @for $pos from -100 through 100 {
                        .#{$side}\(#{$pos}\) {
                            #{$side}: #{$pos * 1%} !important;
                        }
                    }

                    @for $pos from -200 through 200 {
                        .#{$side}\(#{$pos}px\) {
                            #{$side}: #{$pos * 1px} !important;
                        }
                    }

                    @for $pos from -100 through 100 {
                        .#{$side}\(#{$pos}dvh\) {
                            #{$side}: #{$pos * 1dvh} !important;
                        }
                    }

                    @for $pos from -100 through 100 {
                        .#{$side}\(#{$pos}dvw\) {
                            #{$side}: #{$pos * 1dvw} !important;
                        }
                    }
                }

                @for $pos from -100 through 100 {
                    .inset\(#{$pos}\) {
                        inset: #{$pos * 1%} !important;
                    }
                }

                @for $pos from -200 through 200 {
                    .inset\(#{$pos}px\) {
                        inset: #{$pos * 1px} !important;
                    }
                }

                @for $pos from -100 through 100 {
                    .inset\(#{$pos}dvh\) {
                        inset: #{$pos * 1dvh} !important;
                    }
                }

                @for $pos from -100 through 100 {
                    .inset\(#{$pos}dvw\) {
                        inset: #{$pos * 1dvw} !important;
                    }
                }
            }

            .center {
                &\(h\) {
                    left: 50% !important;
                    transform: translateX(-50%) !important;
                }

                &\(v\) {
                    top: 50% !important;
                    transform: translateY(-50%) !important;
                }

                &\(c\) {
                    left: 50% !important;
                    top: 50% !important;
                    transform: translateX(-50%) translateY(-50%) !important;
                }
            }
        }
    }
}

// Versão mobile com !important
@include mix.responsive() {
    .mob\:\! {
        @each $position in $positions {
            &#{$position} {
                position: $position !important;

                @if $position == relative or $position == absolute or $position == fixed {
                    @each $side in $sides {
                        @for $pos from -100 through 100 {
                            .#{$side}\(#{$pos}\) {
                                #{$side}: #{$pos * 1%} !important;
                            }
                        }

                        @for $pos from -200 through 200 {
                            .#{$side}\(#{$pos}px\) {
                                #{$side}: #{$pos * 1px} !important;
                            }
                        }

                        @for $pos from -100 through 100 {
                            .#{$side}\(#{$pos}dvh\) {
                                #{$side}: #{$pos * 1dvh} !important;
                            }
                        }

                        @for $pos from -100 through 100 {
                            .#{$side}\(#{$pos}dvw\) {
                                #{$side}: #{$pos * 1dvw} !important;
                            }
                        }
                    }

                    @for $pos from -100 through 100 {
                        .inset\(#{$pos}\) {
                            inset: #{$pos * 1%} !important;
                        }
                    }

                    @for $pos from -200 through 200 {
                        .inset\(#{$pos}px\) {
                            inset: #{$pos * 1px} !important;
                        }
                    }

                    @for $pos from -100 through 100 {
                        .inset\(#{$pos}dvh\) {
                            inset: #{$pos * 1dvh} !important;
                        }
                    }

                    @for $pos from -100 through 100 {
                        .inset\(#{$pos}dvw\) {
                            inset: #{$pos * 1dvw} !important;
                        }
                    }
                }

                .center {
                    &\(h\) {
                        left: 50% !important;
                        transform: translateX(-50%) !important;
                    }

                    &\(v\) {
                        top: 50% !important;
                        transform: translateY(-50%) !important;
                    }

                    &\(c\) {
                        left: 50% !important;
                        top: 50% !important;
                        transform: translateX(-50%) translateY(-50%) !important;
                    }
                }
            }
        }
    }
}

.z {
    @for $z from 0 through 100 {
        &-#{$z} {
            z-index: $z;
        }
    }
}

.\! {
    &z {
        @for $z from 0 through 100 {
            &-#{$z} {
                z-index: $z !important;
            }
        }
    }
}

@include mix.responsive() {
    .mob\: {
        &z {
            @for $z from 0 through 100 {
                &-#{$z} {
                    z-index: $z;
                }
            }
        }
    }
    
    .mob\:\! {
        &z {
            @for $z from 0 through 100 {
                &-#{$z} {
                    z-index: $z !important;
                }
            }
        }
    }
}

//* Menu de Contexto: [https://webeponto.notion.site/Popover-Menu-Contextual-8e86b746525446e382a24b9826bdef85]
[popover] {
	top: anchor(top);
	left: anchor(right);
	position-try-options: flip-block, flip-inline;

	// Ancoramento:
	&.y {
		&-top {
			top: anchor(top);
		}

		&-bottom {
			top: anchor(bottom);
		}
	}

	&.x {
		&-left {
			left: anchor(left);
		}

		&-right {
			left: anchor(right);
		}
	}

	&.inset {
		// Top:
		&-top {
			inset-area: top;
		}

		&-top\/left {
			inset-area: top span-left;
		}

		&-top\/right {
			inset-area: top span-right;
		}

		&-top\/all,
		&-top\/full {
			inset-area: top span-all;
		}

		// Left:
		&-left {
			inset-area: left;
		}

		&-left\/top {
			inset-area: left span-top;
		}

		&-left\/bottom {
			inset-area: left span-bottom;
		}

		&-left\/all,
		&-left\/full {
			inset-area: left span-all;
		}

		// Bottom:
		&-bottom {
			inset-area: bottom;
		}

		&-bottom\/left {
			inset-area: bottom span-left;
		}

		&-bottom\/right {
			inset-area: bottom span-right;
		}

		&-bottom\/all,
		&-bottom\/full {
			inset-area: bottom span-all;
		}

		// Right:
		&-right {
			inset-area: right;
		}

		&-right\/top {
			inset-area: right span-top;
		}

		&-right\/bottom {
			inset-area: right span-bottom;
		}

		&-right\/all,
		&-right\/full {
			inset-area: right span-all;
		}

		// Corners:
		&-top-left {
			inset-area: top left;
		}

		&-top-right {
			inset-area: top right;
		}

		&-bottom-left {
			inset-area: bottom left;
		}

		&-bottom-right {
			inset-area: bottom right;
		}
	}

	// Especificação de tamanho:
	&.w {
		@for $w from 0 through 19 {
			$v: $w * 5;

			&#{$v},
			&-#{$v} {
				&-min {
					min-inline-size: #{$v * 1%};
				}

				&-max {
					max-inline-size: #{$v * 1%};
				}
			}
		}

		&1\/3,
		&-33 {
			&-min {
				min-inline-size: 33%;
			}

			&-max {
				max-inline-size: 33%;
			}
		}

		&2\/3,
		&-66 {
			&-min {
				min-inline-size: 66%;
			}

			&-max {
				max-inline-size: 66%;
			}
		}

		@for $w from 0 through 20 {

			&#{$w}r,
			&-#{$w}r {
				&-min {
					min-inline-size: #{$w * 1rem};
				}

				&-max {
					max-inline-size: #{$w * 1rem};
				}
			}
		}

		@for $w from 0 through 20 {

			&#{$w}em,
			&-#{$w}em {
				&-min {
					min-inline-size: #{$w * 1em};
				}

				&-max {
					max-inline-size: #{$w * 1em};
				}
			}
		}

		@for $w from 0 through 60 {
			$v: $w * 5;

			&#{$v}px,
			&-#{$v}px {
				&-min {
					min-inline-size: #{$v * 1px};
				}

				&-max {
					max-inline-size: #{$v * 1px};
				}
			}
		}

		&-full,
		&100,
		&-100 {
			&-min {
				min-inline-size: 100%;
			}

			&-max {
				max-inline-size: 100%;
			}
		}

		&-clear {
			&-min {
				min-inline-size: unset;
			}

			&-max {
				max-inline-size: unset;
			}
		}
	}
}

//* Transbordamento: [https://webeponto.notion.site/Transbordamento-de63bf79f9b74d69a60ad29e5c953c58]
.overflow {
    overflow: auto;

    &-hidden {
        overflow: hidden;
    }

    &-scroll {
        overflow: scroll;
    }

    &-visible {
        overflow: visible;
    }

    &-y {
        overflow-y: auto;

        &-hidden {
            overflow-y: hidden;
        }

        &-scroll {
            overflow-y: scroll;
        }

        &-visible {
            overflow-y: visible;
        }
    }

    &-x {
        overflow-x: auto;

        &-hidden {
            overflow-x: hidden;
        }

        &-scroll {
            overflow-x: scroll;
        }

        &-visible {
            overflow-x: visible;
        }
    }
}

.\! {
    &overflow {
        overflow: auto !important;

        &-hidden {
            overflow: hidden !important;
        }

        &-scroll {
            overflow: scroll !important;
        }

        &-visible {
            overflow: visible !important;
        }

        &-y {
            overflow-y: auto !important;

            &-hidden {
                overflow-y: hidden !important;
            }

            &-scroll {
                overflow-y: scroll !important;
            }

            &-visible {
                overflow-y: visible !important;
            }
        }

        &-x {
            overflow-x: auto !important;

            &-hidden {
                overflow-x: hidden !important;
            }

            &-scroll {
                overflow-x: scroll !important;
            }

            &-visible {
                overflow-x: visible !important;
            }
        }
    }
}

@include mix.responsive() {
    .mob\: {
        &overflow {
            overflow: auto;

            &-hidden {
                overflow: hidden;
            }

            &-scroll {
                overflow: scroll;
            }

            &-visible {
                overflow: visible;
            }

            &-y {
                overflow-y: auto;

                &-hidden {
                    overflow-y: hidden;
                }

                &-scroll {
                    overflow-y: scroll;
                }

                &-visible {
                    overflow-y: visible;
                }
            }

            &-x {
                overflow-x: auto;

                &-hidden {
                    overflow-x: hidden;
                }

                &-scroll {
                    overflow-x: scroll;
                }

                &-visible {
                    overflow-x: visible;
                }
            }
        }
    }

    .mob\:\! {
        &overflow {
            overflow: auto !important;

            &-hidden {
                overflow: hidden !important;
            }

            &-scroll {
                overflow: scroll !important;
            }

            &-visible {
                overflow: visible !important;
            }

            &-y {
                overflow-y: auto !important;

                &-hidden {
                    overflow-y: hidden !important;
                }

                &-scroll {
                    overflow-y: scroll !important;
                }

                &-visible {
                    overflow-y: visible !important;
                }
            }

            &-x {
                overflow-x: auto !important;

                &-hidden {
                    overflow-x: hidden !important;
                }

                &-scroll {
                    overflow-x: scroll !important;
                }

                &-visible {
                    overflow-x: visible !important;
                }
            }
        }
    }
}

//* Orientação de Texto: [https://webeponto.notion.site/Orienta-o-de-Texto-1e104250dd7c46a48d25cea86d8cfb13]
.t {
	&-left {
		text-align: left;
	}

	&-center {
		text-align: center;
	}

	&-right {
		text-align: right;
	}

	&-justify {
		text-align: justify;

		&-all {
			text-align: justify-all;
		}
	}

	&-start {
		text-align: start;
	}

	&-end {
		text-align: end;
	}
}

.\! {
	&t {
		&-left {
			text-align: left !important;
		}

		&-center {
			text-align: center !important;
		}

		&-right {
			text-align: right !important;
		}

		&-justify {
			text-align: justify !important;

			&-all {
				text-align: justify-all !important;
			}
		}

		&-start {
			text-align: start !important;
		}

		&-end {
			text-align: end !important;
		}
	}
}

@include mix.responsive() {
	.mob\: {
		&t {
			&-left {
				text-align: left;
			}

			&-center {
				text-align: center;
			}

			&-right {
				text-align: right;
			}

			&-justify {
				text-align: justify;

				&-all {
					text-align: justify-all;
				}
			}

			&-start {
				text-align: start;
			}

			&-end {
				text-align: end;
			}
		}
	}

	.mob\:\! {
		&t {
			&-left {
				text-align: left !important;
			}

			&-center {
				text-align: center !important;
			}

			&-right {
				text-align: right !important;
			}

			&-justify {
				text-align: justify !important;

				&-all {
					text-align: justify-all !important;
				}
			}

			&-start {
				text-align: start !important;
			}

			&-end {
				text-align: end !important;
			}
		}
	}
}

//* Distanciamento de Linhas de Texto:
.lh {
	@for $lh from 0 through 8 {
		$v: $lh * 10%;

		&-#{$lh} {
			line-height: #{$v + 100%};
		}
	}

	@for $lh from 0 through 8 {
		$v: math.div($lh, 10) * 1em;

		&-1#{$lh}0em {
			line-height: #{$v + 1em};
		}
	}
}

.\! {
	&lh {
		@for $lh from 0 through 8 {
			$v: $lh * 10%;

			&-#{$lh} {
				line-height: #{$v + 100%}!important;
			}
		}

		@for $lh from 0 through 8 {
			$v: math.div($lh, 10) * 1em;

			&-1#{$lh}0em {
				line-height: #{$v + 1em}!important;
			}
		}
	}
}

@include mix.responsive() {
	.mob\: {
		&lh{
			@for $lh from 0 through 8 {
				$v: $lh * 10%;

				&-#{$lh} {
					line-height: #{$v + 100%};
				}
			}

			@for $lh from 0 through 8 {
				$v: math.div($lh, 10) * 1em;

				&-1#{$lh}0em {
					line-height: #{$v + 1em};
				}
			}
		}
	}

	.mob\:\! {
        &lh {
            @for $lh from 0 through 8 {
                $v: $lh * 10%;

                &-#{$lh} {
                    line-height: #{$v + 100%}!important;
                }
            }

            @for $lh from 0 through 8 {
                $v: math.div($lh, 10) * 1em;

                &-1#{$lh}0em {
                    line-height: #{$v + 1em}!important;
                }
            }
        }
    }
}

//* Tamanho do Texto: [https://webeponto.notion.site/Tamanho-do-Texto-10a7879182e580f7a0e9c871925b3b61?pvs=74]
.fs {
	@for $fs from 0 through 200 {
		$v: $fs * 1%;

		&-#{$fs} {
			font-size: #{$v};
		}
	}

	@for $fs from 0 through 300 {
		$v: $fs * 1px;

		&-#{$fs}px {
			font-size: #{$v};
		}
	}

	@for $fs from 0 through 200 {
		$rv: $fs * 5;
		$v: $rv * 0.01em;

		&-#{$rv}em {
			font-size: #{$v};
		}
	}

	@for $fs from 0 through 200 {
		$rv: $fs * 5;
		$v: $rv * 0.01rem;

		&-#{$rv}rem {
			font-size: #{$v};
		}
	}
}

.\!{
	&fs{
		@for $fs from 0 through 200 {
			$v: $fs * 1%;

			&-#{$fs} {
				font-size: #{$v};
			}
		}

		@for $fs from 0 through 300 {
			$v: $fs * 1px;

			&-#{$fs}px {
				font-size: #{$v};
			}
		}

		@for $fs from 0 through 200 {
			$rv: $fs * 5;
			$v: $rv * 0.01em;

			&-#{$rv}em {
				font-size: #{$v};
			}
		}

		@for $fs from 0 through 200 {
			$rv: $fs * 5;
			$v: $rv * 0.01rem;

			&-#{$rv}rem {
				font-size: #{$v};
			}
		}
	}
}

@include mix.responsive() {
	.mob\: {
		&fs {
			@for $fs from 0 through 200 {
				$v: $fs * 1%;

				&-#{$fs} {
					font-size: #{$v};
				}
			}

			@for $fs from 0 through 300 {
				$v: $fs * 1px;

				&-#{$fs}px {
					font-size: #{$v};
				}
			}

			@for $fs from 0 through 200 {
				$rv: $fs * 5;
				$v: $rv * 0.01em;

				&-#{$rv}em {
					font-size: #{$v};
				}
			}

			@for $fs from 0 through 200 {
				$rv: $fs * 5;
				$v: $rv * 0.01rem;

				&-#{$rv}rem {
					font-size: #{$v};
				}
			}
		}
	}

	.mob\:\!{
		&fs{
			@for $fs from 0 through 200 {
				$v: $fs * 1%;

				&-#{$fs} {
					font-size: #{$v};
				}
			}

			@for $fs from 0 through 300 {
				$v: $fs * 1px;

				&-#{$fs}px {
					font-size: #{$v};
				}
			}

			@for $fs from 0 through 200 {
				$rv: $fs * 5;
				$v: $rv * 0.01em;

				&-#{$rv}em {
					font-size: #{$v};
				}
			}

			@for $fs from 0 through 200 {
				$rv: $fs * 5;
				$v: $rv * 0.01rem;

				&-#{$rv}rem {
					font-size: #{$v};
				}
			}
		}
	}
}

//* Transformação de Texto: [https://webeponto.notion.site/Transforma-o-de-Texto-b40e813e484b49b58d547c70df4c24d9]
.tt{
	&-uppercase {
		text-transform: uppercase;
	}

	&-lowercase {
        text-transform: lowercase;
    }

	&-capitalize {
        text-transform: capitalize;

		&-words{
			text-transform: capitalize-words;
		}
    }

	&-math-auto {
        text-transform: math-auto;
    }
	
	&-none {
        text-transform: none;
    }
}

.\!{
	&tt{
		&-uppercase {
			text-transform: uppercase!important;
		}

		&-lowercase {
			text-transform: lowercase!important;
		}

		&-capitalize {
			text-transform: capitalize!important;

			&-words{
				text-transform: capitalize-words!important;
			}
		}

		&-math-auto {
			text-transform: math-auto!important;
		}
		
		&-none {
			text-transform: none!important;
		}
	}
}

@include mix.responsive() {
	.mob\: {
		&tt{
			&-uppercase {
				text-transform: uppercase;
			}

			&-lowercase {
				text-transform: lowercase;
			}

			&-capitalize {
				text-transform: capitalize;

				&-words{
					text-transform: capitalize-words;
				}
			}

			&-math-auto {
				text-transform: math-auto;
			}
			
			&-none {
				text-transform: none;
			}
		}
	}

	.mob\:\!{
		&tt{
			&-uppercase {
				text-transform: uppercase!important;
			}

			&-lowercase {
				text-transform: lowercase!important;
			}

			&-capitalize {
				text-transform: capitalize!important;

				&-words{
					text-transform: capitalize-words!important;
				}
			}

			&-math-auto {
				text-transform: math-auto!important;
			}
			
			&-none {
				text-transform: none!important;
			}
		}
	}
}

//* Padding: [https://webeponto.notion.site/Padding-2dea7be58df54fd38275309aaa177708]
.p {

	// General
	@for $p from 0 through 5 {
		&-#{$p} {
			padding: #{$p * 1%};

			&-neg {
				padding: -#{$p * 1%};
			}
		}
	}

	@for $p from 0 through 300 {
		&-#{$p}px {
			padding: #{$p * 1px};

			&-neg {
				padding: -#{$p * 1px};
			}
		}
	}

	@for $p from 0 through 30 {
		&-#{$p}r {
			padding: #{$p * 1rem};

			&-neg {
				padding: -#{$p * 1rem};
			}
		}
	}

	@for $p from 0 through 30 {
		&-#{$p}em {
			padding: #{$p * 1em};

			&-neg {
				padding: -#{$p * 1em};
			}
		}
	}

	&-a,
	&-auto {
		padding: auto;
	}

	&-0 {
		padding: 0 !important;
	}

	// Y-Axis
	&y {
		@for $py from 0 through 5 {
			&-#{$py} {
				padding-top: #{$py * 1%};
				padding-bottom: #{$py * 1%};

				&-neg {
					padding-top: -#{$py * 1%};
					padding-bottom: -#{$py * 1%};
				}
			}
		}

		@for $py from 0 through 300 {
			&-#{$py}px {
				padding-top: #{$py * 1px};
				padding-bottom: #{$py * 1px};

				&-neg {
					padding-top: -#{$py * 1px};
					padding-bottom: -#{$py * 1px};
				}
			}
		}

		@for $py from 0 through 15 {
			&-#{$py}r {
				padding-top: #{$py * 1rem};
				padding-bottom: #{$py * 1rem};

				&-neg {
					padding-top: -#{$py * 1rem};
					padding-bottom: -#{$py * 1rem};
				}
			}
		}

		@for $py from 0 through 15 {
			&-#{$py}em {
				padding-top: #{$py * 1em};
				padding-bottom: #{$py * 1em};

				&-neg {
					padding-top: -#{$py * 1em};
					padding-bottom: -#{$py * 1em};
				}
			}
		}

		&-a,
		&-auto {
			padding-top: auto;
			padding-bottom: auto;
		}

		&-0 {
			padding-top: 0;
			padding-bottom: 0;
		}
	}

	// X-Axis
	&x {
		@for $px from 0 through 5 {
			&-#{$px} {
				padding-left: #{$px * 1%};
				padding-right: #{$px * 1%};

				&-neg {
					padding-left: -#{$px * 1%};
					padding-right: -#{$px * 1%};
				}
			}
		}

		@for $px from 0 through 300 {
			&-#{$px}px {
				padding-left: #{$px * 1px};
				padding-right: #{$px * 1px};

				&-neg {
					padding-left: -#{$px * 1px};
					padding-right: -#{$px * 1px};
				}
			}
		}

		@for $px from 0 through 15 {
			&-#{$px}r {
				padding-left: #{$px * 1rem};
				padding-right: #{$px * 1rem};

				&-neg {
					padding-left: -#{$px * 1rem};
					padding-right: -#{$px * 1rem};
				}
			}
		}

		@for $px from 0 through 15 {
			&-#{$px}em {
				padding-left: #{$px * 1em};
				padding-right: #{$px * 1em};

				&-neg {
					padding-left: -#{$px * 1em};
					padding-right: -#{$px * 1em};
				}
			}
		}

		&-a,
		&-auto {
			padding-left: auto;
			padding-right: auto;
		}

		&-0 {
			padding-left: 0;
			padding-right: 0;
		}
	}

	// Top
	&t {
		@for $mt from 0 through 5 {
			&-#{$mt} {
				padding-top: #{$mt * 1%};

				&-neg {
					padding-top: -#{$mt * 1%};
				}
			}
		}

		@for $mt from 0 through 300 {
			&-#{$mt}px {
				padding-top: #{$mt * 1px};

				&-neg {
					padding-top: -#{$mt * 1px};
				}
			}
		}

		@for $mt from 0 through 15 {
			&-#{$mt}r {
				padding-top: #{$mt * 1rem};

				&-neg {
					padding-top: -#{$mt * 1rem};
				}
			}
		}

		@for $mt from 0 through 15 {
			&-#{$mt}em {
				padding-top: #{$mt * 1em};

				&-neg {
					padding-top: -#{$mt * 1em};
				}
			}
		}

		&-a,
		&-auto {
			padding-top: auto;
		}

		&-0 {
			padding-top: 0;
		}
	}

	// Right
	&r {
		@for $pr from 0 through 5 {
			&-#{$pr} {
				padding-right: #{$pr * 1%};

				&-neg {
					padding-right: -#{$pr * 1%};
				}
			}
		}

		@for $pr from 0 through 300 {
			&-#{$pr}px {
				padding-right: #{$pr * 1px};

				&-neg {
					padding-right: -#{$pr * 1px};
				}
			}
		}

		@for $pr from 0 through 15 {
			&-#{$pr}r {
				padding-right: #{$pr * 1rem};

				&-neg {
					padding-right: -#{$pr * 1rem};
				}
			}
		}

		@for $pr from 0 through 15 {
			&-#{$pr}em {
				padding-right: #{$pr * 1em};

				&-neg {
					padding-right: -#{$pr * 1em};
				}
			}
		}

		&-a,
		&-auto {
			padding-right: auto;
		}

		&-0 {
			padding-right: 0;
		}
	}

	// Bottom
	&b {
		@for $pb from 0 through 5 {
			&-#{$pb} {
				padding-bottom: #{$pb * 1%};

				&-neg {
					padding-bottom: -#{$pb * 1%};
				}
			}
		}

		@for $pb from 0 through 300 {
			&-#{$pb}px {
				padding-bottom: #{$pb * 1px};

				&-neg {
					padding-bottom: -#{$pb * 1px};
				}
			}
		}

		@for $pb from 0 through 15 {
			&-#{$pb}r {
				padding-bottom: #{$pb * 1rem};

				&-neg {
					padding-bottom: -#{$pb * 1rem};
				}
			}
		}

		@for $pb from 0 through 15 {
			&-#{$pb}em {
				padding-bottom: #{$pb * 1em};

				&-neg {
					padding-bottom: -#{$pb * 1em};
				}
			}
		}

		&-a,
		&-auto {
			padding-bottom: auto;
		}

		&-0 {
			padding-bottom: 0;
		}
	}

	//? Left
	&l {
		@for $pl from 0 through 5 {
			&-#{$pl} {
				padding-left: #{$pl * 1%};

				&-neg {
					padding-left: -#{$pl * 1%};
				}
			}
		}

		@for $pl from 0 through 300 {
			&-#{$pl}px {
				padding-left: #{$pl * 1px};

				&-neg {
					padding-left: -#{$pl * 1px};
				}
			}
		}

		@for $pl from 0 through 15 {
			&-#{$pl}r {
				padding-left: #{$pl * 1rem};

				&-neg {
					padding-left: -#{$pl * 1rem};
				}
			}
		}

		@for $pl from 0 through 15 {
			&-#{$pl}em {
				padding-left: #{$pl * 1em};

				&-neg {
					padding-left: -#{$pl * 1em};
				}
			}
		}

		&-a,
		&-auto {
			padding-left: auto;
		}

		&-0 {
			padding-left: 0;
		}
	}
}

.\! {
	&p {

		// General
		@for $p from 0 through 5 {
			&-#{$p} {
				padding: #{$p * 1%}!important;

				&-neg {
					padding: -#{$p * 1%}!important;
				}
			}
		}

		@for $p from 0 through 300 {
			&-#{$p}px {
				padding: #{$p * 1px}!important;

				&-neg {
					padding: -#{$p * 1px}!important;
				}
			}
		}

		@for $p from 0 through 30 {
			&-#{$p}r {
				padding: #{$p * 1rem}!important;

				&-neg {
					padding: -#{$p * 1rem}!important;
				}
			}
		}

		@for $p from 0 through 30 {
			&-#{$p}em {
				padding: #{$p * 1em}!important;

				&-neg {
					padding: -#{$p * 1em}!important;
				}
			}
		}

		&-a,
		&-auto {
			padding: auto!important;
		}

		&-0 {
			padding: 0 !important;
		}

		// Y-Axis
		&y {
			@for $py from 0 through 5 {
				&-#{$py} {
					padding-top: #{$py * 1%}!important;
					padding-bottom: #{$py * 1%}!important;

					&-neg {
						padding-top: -#{$py * 1%}!important;
						padding-bottom: -#{$py * 1%}!important;
					}
				}
			}

			@for $py from 0 through 300 {
				&-#{$py}px {
					padding-top: #{$py * 1px}!important;
					padding-bottom: #{$py * 1px}!important;

					&-neg {
						padding-top: -#{$py * 1px}!important;
						padding-bottom: -#{$py * 1px}!important;
					}
				}
			}

			@for $py from 0 through 15 {
				&-#{$py}r {
					padding-top: #{$py * 1rem}!important;
					padding-bottom: #{$py * 1rem}!important;

					&-neg {
						padding-top: -#{$py * 1rem}!important;
						padding-bottom: -#{$py * 1rem}!important;
					}
				}
			}

			@for $py from 0 through 15 {
				&-#{$py}em {
					padding-top: #{$py * 1em}!important;
					padding-bottom: #{$py * 1em}!important;

					&-neg {
						padding-top: -#{$py * 1em}!important;
						padding-bottom: -#{$py * 1em}!important;
					}
				}
			}

			&-a,
			&-auto {
				padding-top: auto!important;
				padding-bottom: auto!important;
			}

			&-0 {
				padding-top: 0!important;
				padding-bottom: 0!important;
			}
		}

		// X-Axis
		&x {
			@for $px from 0 through 5 {
				&-#{$px} {
					padding-left: #{$px * 1%}!important;
					padding-right: #{$px * 1%}!important;

					&-neg {
						padding-left: -#{$px * 1%}!important;
						padding-right: -#{$px * 1%}!important;
					}
				}
			}

			@for $px from 0 through 300 {
				&-#{$px}px {
					padding-left: #{$px * 1px}!important;
					padding-right: #{$px * 1px}!important;

					&-neg {
						padding-left: -#{$px * 1px}!important;
						padding-right: -#{$px * 1px}!important;
					}
				}
			}

			@for $px from 0 through 15 {
				&-#{$px}r {
					padding-left: #{$px * 1rem}!important;
					padding-right: #{$px * 1rem}!important;

					&-neg {
						padding-left: -#{$px * 1rem}!important;
						padding-right: -#{$px * 1rem}!important;
					}
				}
			}

			@for $px from 0 through 15 {
				&-#{$px}em {
					padding-left: #{$px * 1em}!important;
					padding-right: #{$px * 1em}!important;

					&-neg {
						padding-left: -#{$px * 1em}!important;
						padding-right: -#{$px * 1em}!important;
					}
				}
			}

			&-a,
			&-auto {
				padding-left: auto!important;
				padding-right: auto!important;
			}

			&-0 {
				padding-left: 0!important;
				padding-right: 0!important;
			}
		}

		// Top
		&t {
			@for $mt from 0 through 5 {
				&-#{$mt} {
					padding-top: #{$mt * 1%}!important;

					&-neg {
						padding-top: -#{$mt * 1%}!important;
					}
				}
			}

			@for $mt from 0 through 300 {
				&-#{$mt}px {
					padding-top: #{$mt * 1px}!important;

					&-neg {
						padding-top: -#{$mt * 1px}!important;
					}
				}
			}

			@for $mt from 0 through 15 {
				&-#{$mt}r {
					padding-top: #{$mt * 1rem}!important;

					&-neg {
						padding-top: -#{$mt * 1rem}!important;
					}
				}
			}

			@for $mt from 0 through 15 {
				&-#{$mt}em {
					padding-top: #{$mt * 1em}!important;

					&-neg {
						padding-top: -#{$mt * 1em}!important;
					}
				}
			}

			&-a,
			&-auto {
				padding-top: auto!important;
			}

			&-0 {
				padding-top: 0!important;
			}
		}

		// Right
		&r {
			@for $pr from 0 through 5 {
				&-#{$pr} {
					padding-right: #{$pr * 1%}!important;

					&-neg {
						padding-right: -#{$pr * 1%}!important;
					}
				}
			}

			@for $pr from 0 through 300 {
				&-#{$pr}px {
					padding-right: #{$pr * 1px}!important;

					&-neg {
						padding-right: -#{$pr * 1px}!important;
					}
				}
			}

			@for $pr from 0 through 15 {
				&-#{$pr}r {
					padding-right: #{$pr * 1rem}!important;

					&-neg {
						padding-right: -#{$pr * 1rem}!important;
					}
				}
			}

			@for $pr from 0 through 15 {
				&-#{$pr}em {
					padding-right: #{$pr * 1em}!important;

					&-neg {
						padding-right: -#{$pr * 1em}!important;
					}
				}
			}

			&-a,
			&-auto {
				padding-right: auto!important;
			}

			&-0 {
				padding-right: 0!important;
			}
		}

		// Bottom
		&b {
			@for $pb from 0 through 5 {
				&-#{$pb} {
					padding-bottom: #{$pb * 1%}!important;

					&-neg {
						padding-bottom: -#{$pb * 1%}!important;
					}
				}
			}

			@for $pb from 0 through 300 {
				&-#{$pb}px {
					padding-bottom: #{$pb * 1px}!important;

					&-neg {
						padding-bottom: -#{$pb * 1px}!important;
					}
				}
			}

			@for $pb from 0 through 15 {
				&-#{$pb}r {
					padding-bottom: #{$pb * 1rem}!important;

					&-neg {
						padding-bottom: -#{$pb * 1rem}!important;
					}
				}
			}

			@for $pb from 0 through 15 {
				&-#{$pb}em {
					padding-bottom: #{$pb * 1em}!important;

					&-neg {
						padding-bottom: -#{$pb * 1em}!important;
					}
				}
			}

			&-a,
			&-auto {
				padding-bottom: auto!important;
			}

			&-0 {
				padding-bottom: 0!important;
			}
		}

		//? Left
		&l {
			@for $pl from 0 through 5 {
				&-#{$pl} {
					padding-left: #{$pl * 1%}!important;

					&-neg {
						padding-left: -#{$pl * 1%}!important;
					}
				}
			}

			@for $pl from 0 through 300 {
				&-#{$pl}px {
					padding-left: #{$pl * 1px}!important;

					&-neg {
						padding-left: -#{$pl * 1px}!important;
					}
				}
			}

			@for $pl from 0 through 15 {
				&-#{$pl}r {
					padding-left: #{$pl * 1rem}!important;

					&-neg {
						padding-left: -#{$pl * 1rem}!important;
					}
				}
			}

			@for $pl from 0 through 15 {
				&-#{$pl}em {
					padding-left: #{$pl * 1em}!important;

					&-neg {
						padding-left: -#{$pl * 1em}!important;
					}
				}
			}

			&-a,
			&-auto {
				padding-left: auto!important;
			}

			&-0 {
				padding-left: 0!important;
			}
		}
	}
}

@include mix.responsive() {
	.mob\: {
		&p {

			// General
			@for $p from 0 through 5 {
				&-#{$p} {
					padding: #{$p * 1%};

					&-neg {
						padding: -#{$p * 1%};
					}
				}
			}

			@for $p from 0 through 300 {
				&-#{$p}px {
					padding: #{$p * 1px};

					&-neg {
						padding: -#{$p * 1px};
					}
				}
			}

			@for $p from 0 through 30 {
				&-#{$p}r {
					padding: #{$p * 1rem};

					&-neg {
						padding: -#{$p * 1rem};
					}
				}
			}

			@for $p from 0 through 30 {
				&-#{$p}em {
					padding: #{$p * 1em};

					&-neg {
						padding: -#{$p * 1em};
					}
				}
			}

			&-a,
			&-auto {
				padding: auto;
			}

			&-0 {
				padding: 0 !important;
			}

			// Y-Axis
			&y {
				@for $py from 0 through 5 {
					&-#{$py} {
						padding-top: #{$py * 1%};
						padding-bottom: #{$py * 1%};

						&-neg {
							padding-top: -#{$py * 1%};
							padding-bottom: -#{$py * 1%};
						}
					}
				}

				@for $py from 0 through 300 {
					&-#{$py}px {
						padding-top: #{$py * 1px};
						padding-bottom: #{$py * 1px};

						&-neg {
							padding-top: -#{$py * 1px};
							padding-bottom: -#{$py * 1px};
						}
					}
				}

				@for $py from 0 through 15 {
					&-#{$py}r {
						padding-top: #{$py * 1rem};
						padding-bottom: #{$py * 1rem};

						&-neg {
							padding-top: -#{$py * 1rem};
							padding-bottom: -#{$py * 1rem};
						}
					}
				}

				@for $py from 0 through 15 {
					&-#{$py}em {
						padding-top: #{$py * 1em};
						padding-bottom: #{$py * 1em};

						&-neg {
							padding-top: -#{$py * 1em};
							padding-bottom: -#{$py * 1em};
						}
					}
				}

				&-a,
				&-auto {
					padding-top: auto;
					padding-bottom: auto;
				}

				&-0 {
					padding-top: 0;
					padding-bottom: 0;
				}
			}

			// X-Axis
			&x {
				@for $px from 0 through 5 {
					&-#{$px} {
						padding-left: #{$px * 1%};
						padding-right: #{$px * 1%};

						&-neg {
							padding-left: -#{$px * 1%};
							padding-right: -#{$px * 1%};
						}
					}
				}

				@for $px from 0 through 300 {
					&-#{$px}px {
						padding-left: #{$px * 1px};
						padding-right: #{$px * 1px};

						&-neg {
							padding-left: -#{$px * 1px};
							padding-right: -#{$px * 1px};
						}
					}
				}

				@for $px from 0 through 15 {
					&-#{$px}r {
						padding-left: #{$px * 1rem};
						padding-right: #{$px * 1rem};

						&-neg {
							padding-left: -#{$px * 1rem};
							padding-right: -#{$px * 1rem};
						}
					}
				}

				@for $px from 0 through 15 {
					&-#{$px}em {
						padding-left: #{$px * 1em};
						padding-right: #{$px * 1em};

						&-neg {
							padding-left: -#{$px * 1em};
							padding-right: -#{$px * 1em};
						}
					}
				}

				&-a,
				&-auto {
					padding-left: auto;
					padding-right: auto;
				}

				&-0 {
					padding-left: 0;
					padding-right: 0;
				}
			}

			// Top
			&t {
				@for $mt from 0 through 5 {
					&-#{$mt} {
						padding-top: #{$mt * 1%};

						&-neg {
							padding-top: -#{$mt * 1%};
						}
					}
				}

				@for $mt from 0 through 300 {
					&-#{$mt}px {
						padding-top: #{$mt * 1px};

						&-neg {
							padding-top: -#{$mt * 1px};
						}
					}
				}

				@for $mt from 0 through 15 {
					&-#{$mt}r {
						padding-top: #{$mt * 1rem};

						&-neg {
							padding-top: -#{$mt * 1rem};
						}
					}
				}

				@for $mt from 0 through 15 {
					&-#{$mt}em {
						padding-top: #{$mt * 1em};

						&-neg {
							padding-top: -#{$mt * 1em};
						}
					}
				}

				&-a,
				&-auto {
					padding-top: auto;
				}

				&-0 {
					padding-top: 0;
				}
			}

			// Right
			&r {
				@for $pr from 0 through 5 {
					&-#{$pr} {
						padding-right: #{$pr * 1%};

						&-neg {
							padding-right: -#{$pr * 1%};
						}
					}
				}

				@for $pr from 0 through 300 {
					&-#{$pr}px {
						padding-right: #{$pr * 1px};

						&-neg {
							padding-right: -#{$pr * 1px};
						}
					}
				}

				@for $pr from 0 through 15 {
					&-#{$pr}r {
						padding-right: #{$pr * 1rem};

						&-neg {
							padding-right: -#{$pr * 1rem};
						}
					}
				}

				@for $pr from 0 through 15 {
					&-#{$pr}em {
						padding-right: #{$pr * 1em};

						&-neg {
							padding-right: -#{$pr * 1em};
						}
					}
				}

				&-a,
				&-auto {
					padding-right: auto;
				}

				&-0 {
					padding-right: 0;
				}
			}

			// Bottom
			&b {
				@for $pb from 0 through 5 {
					&-#{$pb} {
						padding-bottom: #{$pb * 1%};

						&-neg {
							padding-bottom: -#{$pb * 1%};
						}
					}
				}

				@for $pb from 0 through 300 {
					&-#{$pb}px {
						padding-bottom: #{$pb * 1px};

						&-neg {
							padding-bottom: -#{$pb * 1px};
						}
					}
				}

				@for $pb from 0 through 15 {
					&-#{$pb}r {
						padding-bottom: #{$pb * 1rem};

						&-neg {
							padding-bottom: -#{$pb * 1rem};
						}
					}
				}

				@for $pb from 0 through 15 {
					&-#{$pb}em {
						padding-bottom: #{$pb * 1em};

						&-neg {
							padding-bottom: -#{$pb * 1em};
						}
					}
				}

				&-a,
				&-auto {
					padding-bottom: auto;
				}

				&-0 {
					padding-bottom: 0;
				}
			}

			//? Left
			&l {
				@for $pl from 0 through 5 {
					&-#{$pl} {
						padding-left: #{$pl * 1%};

						&-neg {
							padding-left: -#{$pl * 1%};
						}
					}
				}

				@for $pl from 0 through 300 {
					&-#{$pl}px {
						padding-left: #{$pl * 1px};

						&-neg {
							padding-left: -#{$pl * 1px};
						}
					}
				}

				@for $pl from 0 through 15 {
					&-#{$pl}r {
						padding-left: #{$pl * 1rem};

						&-neg {
							padding-left: -#{$pl * 1rem};
						}
					}
				}

				@for $pl from 0 through 15 {
					&-#{$pl}em {
						padding-left: #{$pl * 1em};

						&-neg {
							padding-left: -#{$pl * 1em};
						}
					}
				}

				&-a,
				&-auto {
					padding-left: auto;
				}

				&-0 {
					padding-left: 0;
				}
			}
		}
	}
}

@include mix.responsive() {
	.\!mob\: {
		&p {

			// General
			@for $p from 0 through 5 {
				&-#{$p} {
					padding: #{$p * 1%}!important;

					&-neg {
						padding: -#{$p * 1%}!important;
					}
				}
			}

			@for $p from 0 through 300 {
				&-#{$p}px {
					padding: #{$p * 1px}!important;

					&-neg {
						padding: -#{$p * 1px}!important;
					}
				}
			}

			@for $p from 0 through 30 {
				&-#{$p}r {
					padding: #{$p * 1rem}!important;

					&-neg {
						padding: -#{$p * 1rem}!important;
					}
				}
			}

			@for $p from 0 through 30 {
				&-#{$p}em {
					padding: #{$p * 1em}!important;

					&-neg {
						padding: -#{$p * 1em}!important;
					}
				}
			}

			&-a,
			&-auto {
				padding: auto!important;
			}

			&-0 {
				padding: 0 !important;
			}

			// Y-Axis
			&y {
				@for $py from 0 through 5 {
					&-#{$py} {
						padding-top: #{$py * 1%}!important;
						padding-bottom: #{$py * 1%}!important;

						&-neg {
							padding-top: -#{$py * 1%}!important;
							padding-bottom: -#{$py * 1%}!important;
						}
					}
				}

				@for $py from 0 through 300 {
					&-#{$py}px {
						padding-top: #{$py * 1px}!important;
						padding-bottom: #{$py * 1px}!important;

						&-neg {
							padding-top: -#{$py * 1px}!important;
							padding-bottom: -#{$py * 1px}!important;
						}
					}
				}

				@for $py from 0 through 15 {
					&-#{$py}r {
						padding-top: #{$py * 1rem}!important;
						padding-bottom: #{$py * 1rem}!important;

						&-neg {
							padding-top: -#{$py * 1rem}!important;
							padding-bottom: -#{$py * 1rem}!important;
						}
					}
				}

				@for $py from 0 through 15 {
					&-#{$py}em {
						padding-top: #{$py * 1em}!important;
						padding-bottom: #{$py * 1em}!important;

						&-neg {
							padding-top: -#{$py * 1em}!important;
							padding-bottom: -#{$py * 1em}!important;
						}
					}
				}

				&-a,
				&-auto {
					padding-top: auto!important;
					padding-bottom: auto!important;
				}

				&-0 {
					padding-top: 0!important;
					padding-bottom: 0!important;
				}
			}

			// X-Axis
			&x {
				@for $px from 0 through 5 {
					&-#{$px} {
						padding-left: #{$px * 1%}!important;
						padding-right: #{$px * 1%}!important;

						&-neg {
							padding-left: -#{$px * 1%}!important;
							padding-right: -#{$px * 1%}!important;
						}
					}
				}

				@for $px from 0 through 300 {
					&-#{$px}px {
						padding-left: #{$px * 1px}!important;
						padding-right: #{$px * 1px}!important;

						&-neg {
							padding-left: -#{$px * 1px}!important;
							padding-right: -#{$px * 1px}!important;
						}
					}
				}

				@for $px from 0 through 15 {
					&-#{$px}r {
						padding-left: #{$px * 1rem}!important;
						padding-right: #{$px * 1rem}!important;

						&-neg {
							padding-left: -#{$px * 1rem}!important;
							padding-right: -#{$px * 1rem}!important;
						}
					}
				}

				@for $px from 0 through 15 {
					&-#{$px}em {
						padding-left: #{$px * 1em}!important;
						padding-right: #{$px * 1em}!important;

						&-neg {
							padding-left: -#{$px * 1em}!important;
							padding-right: -#{$px * 1em}!important;
						}
					}
				}

				&-a,
				&-auto {
					padding-left: auto!important;
					padding-right: auto!important;
				}

				&-0 {
					padding-left: 0!important;
					padding-right: 0!important;
				}
			}

			// Top
			&t {
				@for $mt from 0 through 5 {
					&-#{$mt} {
						padding-top: #{$mt * 1%}!important;

						&-neg {
							padding-top: -#{$mt * 1%}!important;
						}
					}
				}

				@for $mt from 0 through 300 {
					&-#{$mt}px {
						padding-top: #{$mt * 1px}!important;

						&-neg {
							padding-top: -#{$mt * 1px}!important;
						}
					}
				}

				@for $mt from 0 through 15 {
					&-#{$mt}r {
						padding-top: #{$mt * 1rem}!important;

						&-neg {
							padding-top: -#{$mt * 1rem}!important;
						}
					}
				}

				@for $mt from 0 through 15 {
					&-#{$mt}em {
						padding-top: #{$mt * 1em}!important;

						&-neg {
							padding-top: -#{$mt * 1em}!important;
						}
					}
				}

				&-a,
				&-auto {
					padding-top: auto!important;
				}

				&-0 {
					padding-top: 0!important;
				}
			}

			// Right
			&r {
				@for $pr from 0 through 5 {
					&-#{$pr} {
						padding-right: #{$pr * 1%}!important;

						&-neg {
							padding-right: -#{$pr * 1%}!important;
						}
					}
				}

				@for $pr from 0 through 300 {
					&-#{$pr}px {
						padding-right: #{$pr * 1px}!important;

						&-neg {
							padding-right: -#{$pr * 1px}!important;
						}
					}
				}

				@for $pr from 0 through 15 {
					&-#{$pr}r {
						padding-right: #{$pr * 1rem}!important;

						&-neg {
							padding-right: -#{$pr * 1rem}!important;
						}
					}
				}

				@for $pr from 0 through 15 {
					&-#{$pr}em {
						padding-right: #{$pr * 1em}!important;

						&-neg {
							padding-right: -#{$pr * 1em}!important;
						}
					}
				}

				&-a,
				&-auto {
					padding-right: auto!important;
				}

				&-0 {
					padding-right: 0!important;
				}
			}

			// Bottom
			&b {
				@for $pb from 0 through 5 {
					&-#{$pb} {
						padding-bottom: #{$pb * 1%}!important;

						&-neg {
							padding-bottom: -#{$pb * 1%}!important;
						}
					}
				}

				@for $pb from 0 through 300 {
					&-#{$pb}px {
						padding-bottom: #{$pb * 1px}!important;

						&-neg {
							padding-bottom: -#{$pb * 1px}!important;
						}
					}
				}

				@for $pb from 0 through 15 {
					&-#{$pb}r {
						padding-bottom: #{$pb * 1rem}!important;

						&-neg {
							padding-bottom: -#{$pb * 1rem}!important;
						}
					}
				}

				@for $pb from 0 through 15 {
					&-#{$pb}em {
						padding-bottom: #{$pb * 1em}!important;

						&-neg {
							padding-bottom: -#{$pb * 1em}!important;
						}
					}
				}

				&-a,
				&-auto {
					padding-bottom: auto!important;
				}

				&-0 {
					padding-bottom: 0!important;
				}
			}

			//? Left
			&l {
				@for $pl from 0 through 5 {
					&-#{$pl} {
						padding-left: #{$pl * 1%}!important;

						&-neg {
							padding-left: -#{$pl * 1%}!important;
						}
					}
				}

				@for $pl from 0 through 300 {
					&-#{$pl}px {
						padding-left: #{$pl * 1px}!important;

						&-neg {
							padding-left: -#{$pl * 1px}!important;
						}
					}
				}

				@for $pl from 0 through 15 {
					&-#{$pl}r {
						padding-left: #{$pl * 1rem}!important;

						&-neg {
							padding-left: -#{$pl * 1rem}!important;
						}
					}
				}

				@for $pl from 0 through 15 {
					&-#{$pl}em {
						padding-left: #{$pl * 1em}!important;

						&-neg {
							padding-left: -#{$pl * 1em}!important;
						}
					}
				}

				&-a,
				&-auto {
					padding-left: auto!important;
				}

				&-0 {
					padding-left: 0!important;
				}
			}
		}
	}
}

//* Margem: [https://webeponto.notion.site/Margens-13b4ef3cd3f24722bef2898170ee2364]
.m {

	// General
	@for $m from 0 through 5 {
		&-#{$m} {
			margin: #{$m * 1%};

			&-neg {
				margin: -#{$m * 1%};
			}
		}
	}

	@for $m from 0 through 300 {
		&-#{$m}px {
			margin: #{$m * 1px};

			&-neg {
				margin: -#{$m * 1px};
			}
		}
	}

	@for $m from 0 through 15 {
		&-#{$m}r {
			margin: #{$m * 1rem};

			&-neg {
				margin: -#{$m * 1rem};
			}
		}
	}

	@for $m from 0 through 15 {
		&-#{$m}em {
			margin: #{$m * 1em};

			&-neg {
				margin: -#{$m * 1em};
			}
		}
	}

	&-a,
	&-auto {
		margin: auto;
	}

	&-0 {
		margin: 0 !important;
	}

	// Y-Axis
	&y {
		@for $my from 0 through 5 {
			&-#{$my} {
				margin-top: #{$my * 1%};
				margin-bottom: #{$my * 1%};

				&-neg {
					margin-top: -#{$my * 1%};
					margin-bottom: -#{$my * 1%};
				}
			}
		}

		@for $my from 0 through 300 {
			&-#{$my}px {
				margin-top: #{$my * 1px};
				margin-bottom: #{$my * 1px};

				&-neg {
					margin-top: -#{$my * 1px};
					margin-bottom: -#{$my * 1px};
				}
			}
		}

		@for $my from 0 through 15 {
			&-#{$my}r {
				margin-top: #{$my * 1rem};
				margin-bottom: #{$my * 1rem};

				&-neg {
					margin-top: -#{$my * 1rem};
					margin-bottom: -#{$my * 1rem};
				}
			}
		}

		@for $my from 0 through 15 {
			&-#{$my}em {
				margin-top: #{$my * 1em};
				margin-bottom: #{$my * 1em};

				&-neg {
					margin-top: -#{$my * 1em};
					margin-bottom: -#{$my * 1em};
				}
			}
		}

		&-a,
		&-auto {
			margin-top: auto;
			margin-bottom: auto;
		}

		&-0 {
			margin-top: 0;
			margin-bottom: 0;
		}
	}

	// X-Axis
	&x {
		@for $mx from 0 through 5 {
			&-#{$mx} {
				margin-left: #{$mx * 1%};
				margin-right: #{$mx * 1%};

				&-neg {
					margin-left: -#{$mx * 1%};
					margin-right: -#{$mx * 1%};
				}
			}
		}

		@for $mx from 0 through 300 {
			&-#{$mx}px {
				margin-left: #{$mx * 1px};
				margin-right: #{$mx * 1px};

				&-neg {
					margin-left: -#{$mx * 1px};
					margin-right: -#{$mx * 1px};
				}
			}
		}

		@for $mx from 0 through 15 {
			&-#{$mx}r {
				margin-left: #{$mx * 1rem};
				margin-right: #{$mx * 1rem};

				&-neg {
					margin-left: -#{$mx * 1rem};
					margin-right: -#{$mx * 1rem};
				}
			}
		}

		@for $mx from 0 through 15 {
			&-#{$mx}em {
				margin-left: #{$mx * 1em};
				margin-right: #{$mx * 1em};

				&-neg {
					margin-left: -#{$mx * 1em};
					margin-right: -#{$mx * 1em};
				}
			}
		}

		&-a,
		&-auto {
			margin-left: auto;
			margin-right: auto;
		}

		&-0 {
			margin-left: 0;
			margin-right: 0;
		}
	}

	// Top
	&t {
		@for $mt from 0 through 5 {
			&-#{$mt} {
				margin-top: #{$mt * 1%};

				&-neg {
					margin-top: -#{$mt * 1%};
				}
			}
		}

		@for $mt from 0 through 300 {
			&-#{$mt}px {
				margin-top: #{$mt * 1px};

				&-neg {
					margin-top: -#{$mt * 1px};
				}
			}
		}

		@for $mt from 0 through 15 {
			&-#{$mt}r {
				margin-top: #{$mt * 1rem};

				&-neg {
					margin-top: -#{$mt * 1rem};
				}
			}
		}

		@for $mt from 0 through 15 {
			&-#{$mt}em {
				margin-top: #{$mt * 1em};

				&-neg {
					margin-top: -#{$mt * 1em};
				}
			}
		}

		&-a,
		&-auto {
			margin-top: auto;
		}

		&-0 {
			margin-top: 0;
		}
	}

	// Right
	&r {
		@for $mr from 0 through 100 {
			&-#{$mr} {
				margin-right: #{$mr * 1%};

				&-neg {
					margin-right: -#{$mr * 1%};
				}
			}
		}

		@for $mr from 0 through 300 {
			&-#{$mr}px {
				margin-right: #{$mr * 1px};

				&-neg {
					margin-right: -#{$mr * 1px};
				}
			}
		}

		@for $mr from 0 through 100 {
			&-#{$mr}r {
				margin-right: #{$mr * 1rem};

				&-neg {
					margin-right: -#{$mr * 1rem};
				}
			}
		}

		@for $mr from 0 through 100 {
			&-#{$mr}em {
				margin-right: #{$mr * 1em};

				&-neg {
					margin-right: -#{$mr * 1em};
				}
			}
		}

		&-a,
		&-auto {
			margin-right: auto;
		}

		&-0 {
			margin-right: 0;
		}
	}

	// Bottom
	&b {
		@for $mb from 0 through 5 {
			&-#{$mb} {
				margin-bottom: #{$mb * 1%};

				&-neg {
					margin-bottom: -#{$mb * 1%};
				}
			}
		}

		@for $mb from 0 through 300 {
			&-#{$mb}px {
				margin-bottom: #{$mb * 1px};

				&-neg {
					margin-bottom: -#{$mb * 1px};
				}
			}
		}

		@for $mb from 0 through 15 {
			&-#{$mb}r {
				margin-bottom: #{$mb * 1rem};

				&-neg {
					margin-bottom: -#{$mb * 1rem};
				}
			}
		}

		@for $mb from 0 through 15 {
			&-#{$mb}em {
				margin-bottom: #{$mb * 1em};

				&-neg {
					margin-bottom: -#{$mb * 1em};
				}
			}
		}

		&-a,
		&-auto {
			margin-bottom: auto;
		}

		&-0 {
			margin-bottom: 0;
		}
	}

	// Left
	&l {
		@for $ml from 0 through 5 {
			&-#{$ml} {
				margin-left: #{$ml * 1%};

				&-neg {
					margin-left: -#{$ml * 1%};
				}
			}
		}

		@for $ml from 0 through 300 {
			&-#{$ml}px {
				margin-left: #{$ml * 1px};

				&-neg {
					margin-left: -#{$ml * 1px};
				}
			}
		}

		@for $ml from 0 through 15 {
			&-#{$ml}r {
				margin-left: #{$ml * 1rem};

				&-neg {
					margin-left: -#{$ml * 1rem};
				}
			}
		}

		@for $ml from 0 through 15 {
			&-#{$ml}r {
				margin-left: #{$ml * 1em};

				&-neg {
					margin-left: -#{$ml * 1em};
				}
			}
		}

		&-a,
		&-auto {
			margin-left: auto;
		}

		&-0 {
			margin-left: 0;
		}
	}
}

.\! {
	&m {

		// General
		@for $m from 0 through 5 {
			&-#{$m} {
				margin: #{$m * 1%}!important;

				&-neg {
					margin: -#{$m * 1%}!important;
				}
			}
		}

		@for $m from 0 through 300 {
			&-#{$m}px {
				margin: #{$m * 1px}!important;

				&-neg {
					margin: -#{$m * 1px}!important;
				}
			}
		}

		@for $m from 0 through 15 {
			&-#{$m}r {
				margin: #{$m * 1rem}!important;

				&-neg {
					margin: -#{$m * 1rem}!important;
				}
			}
		}

		@for $m from 0 through 15 {
			&-#{$m}em {
				margin: #{$m * 1em}!important;

				&-neg {
					margin: -#{$m * 1em}!important;
				}
			}
		}

		&-a,
		&-auto {
			margin: auto!important;
		}

		&-0 {
			margin: 0 !important;
		}

		// Y-Axis
		&y {
			@for $my from 0 through 5 {
				&-#{$my} {
					margin-top: #{$my * 1%}!important;
					margin-bottom: #{$my * 1%}!important;

					&-neg {
						margin-top: -#{$my * 1%}!important;
						margin-bottom: -#{$my * 1%}!important;
					}
				}
			}

			@for $my from 0 through 300 {
				&-#{$my}px {
					margin-top: #{$my * 1px}!important;
					margin-bottom: #{$my * 1px}!important;

					&-neg {
						margin-top: -#{$my * 1px}!important;
						margin-bottom: -#{$my * 1px}!important;
					}
				}
			}

			@for $my from 0 through 15 {
				&-#{$my}r {
					margin-top: #{$my * 1rem}!important;
					margin-bottom: #{$my * 1rem}!important;

					&-neg {
						margin-top: -#{$my * 1rem}!important;
						margin-bottom: -#{$my * 1rem}!important;
					}
				}
			}

			@for $my from 0 through 15 {
				&-#{$my}em {
					margin-top: #{$my * 1em}!important;
					margin-bottom: #{$my * 1em}!important;

					&-neg {
						margin-top: -#{$my * 1em}!important;
						margin-bottom: -#{$my * 1em}!important;
					}
				}
			}

			&-a,
			&-auto {
				margin-top: auto!important;
				margin-bottom: auto!important;
			}

			&-0 {
				margin-top: 0!important;
				margin-bottom: 0!important;
			}
		}

		// X-Axis
		&x {
			@for $mx from 0 through 5 {
				&-#{$mx} {
					margin-left: #{$mx * 1%}!important;
					margin-right: #{$mx * 1%}!important;

					&-neg {
						margin-left: -#{$mx * 1%}!important;
						margin-right: -#{$mx * 1%}!important;
					}
				}
			}

			@for $mx from 0 through 300 {
				&-#{$mx}px {
					margin-left: #{$mx * 1px}!important;
					margin-right: #{$mx * 1px}!important;

					&-neg {
						margin-left: -#{$mx * 1px}!important;
						margin-right: -#{$mx * 1px}!important;
					}
				}
			}

			@for $mx from 0 through 15 {
				&-#{$mx}r {
					margin-left: #{$mx * 1rem}!important;
					margin-right: #{$mx * 1rem}!important;

					&-neg {
						margin-left: -#{$mx * 1rem}!important;
						margin-right: -#{$mx * 1rem}!important;
					}
				}
			}

			@for $mx from 0 through 15 {
				&-#{$mx}em {
					margin-left: #{$mx * 1em}!important;
					margin-right: #{$mx * 1em}!important;

					&-neg {
						margin-left: -#{$mx * 1em}!important;
						margin-right: -#{$mx * 1em}!important;
					}
				}
			}

			&-a,
			&-auto {
				margin-left: auto!important;
				margin-right: auto!important;
			}

			&-0 {
				margin-left: 0!important;
				margin-right: 0!important;
			}
		}

		// Top
		&t {
			@for $mt from 0 through 5 {
				&-#{$mt} {
					margin-top: #{$mt * 1%}!important;

					&-neg {
						margin-top: -#{$mt * 1%}!important;
					}
				}
			}

			@for $mt from 0 through 300 {
				&-#{$mt}px {
					margin-top: #{$mt * 1px}!important;

					&-neg {
						margin-top: -#{$mt * 1px}!important;
					}
				}
			}

			@for $mt from 0 through 15 {
				&-#{$mt}r {
					margin-top: #{$mt * 1rem}!important;

					&-neg {
						margin-top: -#{$mt * 1rem}!important;
					}
				}
			}

			@for $mt from 0 through 15 {
				&-#{$mt}em {
					margin-top: #{$mt * 1em}!important;

					&-neg {
						margin-top: -#{$mt * 1em}!important;
					}
				}
			}

			&-a,
			&-auto {
				margin-top: auto!important;
			}

			&-0 {
				margin-top: 0!important;
			}
		}

		// Right
		&r {
			@for $mr from 0 through 100 {
				&-#{$mr} {
					margin-right: #{$mr * 1%}!important;

					&-neg {
						margin-right: -#{$mr * 1%}!important;
					}
				}
			}

			@for $mr from 0 through 300 {
				&-#{$mr}px {
					margin-right: #{$mr * 1px}!important;

					&-neg {
						margin-right: -#{$mr * 1px}!important;
					}
				}
			}

			@for $mr from 0 through 100 {
				&-#{$mr}r {
					margin-right: #{$mr * 1rem}!important;

					&-neg {
						margin-right: -#{$mr * 1rem}!important;
					}
				}
			}

			@for $mr from 0 through 100 {
				&-#{$mr}em {
					margin-right: #{$mr * 1em}!important;

					&-neg {
						margin-right: -#{$mr * 1em}!important;
					}
				}
			}

			&-a,
			&-auto {
				margin-right: auto!important;
			}

			&-0 {
				margin-right: 0!important;
			}
		}

		// Bottom
		&b {
			@for $mb from 0 through 5 {
				&-#{$mb} {
					margin-bottom: #{$mb * 1%}!important;

					&-neg {
						margin-bottom: -#{$mb * 1%}!important;
					}
				}
			}

			@for $mb from 0 through 300 {
				&-#{$mb}px {
					margin-bottom: #{$mb * 1px}!important;

					&-neg {
						margin-bottom: -#{$mb * 1px}!important;
					}
				}
			}

			@for $mb from 0 through 15 {
				&-#{$mb}r {
					margin-bottom: #{$mb * 1rem}!important;

					&-neg {
						margin-bottom: -#{$mb * 1rem}!important;
					}
				}
			}

			@for $mb from 0 through 15 {
				&-#{$mb}em {
					margin-bottom: #{$mb * 1em}!important;

					&-neg {
						margin-bottom: -#{$mb * 1em}!important;
					}
				}
			}

			&-a,
			&-auto {
				margin-bottom: auto!important;
			}

			&-0 {
				margin-bottom: 0!important;
			}
		}

		// Left
		&l {
			@for $ml from 0 through 5 {
				&-#{$ml} {
					margin-left: #{$ml * 1%}!important;

					&-neg {
						margin-left: -#{$ml * 1%}!important;
					}
				}
			}

			@for $ml from 0 through 300 {
				&-#{$ml}px {
					margin-left: #{$ml * 1px}!important;

					&-neg {
						margin-left: -#{$ml * 1px}!important;
					}
				}
			}

			@for $ml from 0 through 15 {
				&-#{$ml}r {
					margin-left: #{$ml * 1rem}!important;

					&-neg {
						margin-left: -#{$ml * 1rem}!important;
					}
				}
			}

			@for $ml from 0 through 15 {
				&-#{$ml}r {
					margin-left: #{$ml * 1em}!important;

					&-neg {
						margin-left: -#{$ml * 1em}!important;
					}
				}
			}

			&-a,
			&-auto {
				margin-left: auto!important;
			}

			&-0 {
				margin-left: 0!important;
			}
		}
	}
}

@include mix.responsive() {
	.mob\: {
		&m {

			// General
			@for $m from 0 through 5 {
				&-#{$m} {
					margin: #{$m * 1%};

					&-neg {
						margin: -#{$m * 1%};
					}
				}
			}

			@for $m from 0 through 300 {
				&-#{$m}px {
					margin: #{$m * 1px};

					&-neg {
						margin: -#{$m * 1px};
					}
				}
			}

			@for $m from 0 through 15 {
				&-#{$m}r {
					margin: #{$m * 1rem};

					&-neg {
						margin: -#{$m * 1rem};
					}
				}
			}

			@for $m from 0 through 15 {
				&-#{$m}em {
					margin: #{$m * 1em};

					&-neg {
						margin: -#{$m * 1em};
					}
				}
			}

			&-a,
			&-auto {
				margin: auto;
			}

			&-0 {
				margin: 0 !important;
			}

			// Y-Axis
			&y {
				@for $my from 0 through 5 {
					&-#{$my} {
						margin-top: #{$my * 1%};
						margin-bottom: #{$my * 1%};

						&-neg {
							margin-top: -#{$my * 1%};
							margin-bottom: -#{$my * 1%};
						}
					}
				}

				@for $my from 0 through 300 {
					&-#{$my}px {
						margin-top: #{$my * 1px};
						margin-bottom: #{$my * 1px};

						&-neg {
							margin-top: -#{$my * 1px};
							margin-bottom: -#{$my * 1px};
						}
					}
				}

				@for $my from 0 through 15 {
					&-#{$my}r {
						margin-top: #{$my * 1rem};
						margin-bottom: #{$my * 1rem};

						&-neg {
							margin-top: -#{$my * 1rem};
							margin-bottom: -#{$my * 1rem};
						}
					}
				}

				@for $my from 0 through 15 {
					&-#{$my}em {
						margin-top: #{$my * 1em};
						margin-bottom: #{$my * 1em};

						&-neg {
							margin-top: -#{$my * 1em};
							margin-bottom: -#{$my * 1em};
						}
					}
				}

				&-a,
				&-auto {
					margin-top: auto;
					margin-bottom: auto;
				}

				&-0 {
					margin-top: 0;
					margin-bottom: 0;
				}
			}

			// X-Axis
			&x {
				@for $mx from 0 through 5 {
					&-#{$mx} {
						margin-left: #{$mx * 1%};
						margin-right: #{$mx * 1%};

						&-neg {
							margin-left: -#{$mx * 1%};
							margin-right: -#{$mx * 1%};
						}
					}
				}

				@for $mx from 0 through 300 {
					&-#{$mx}px {
						margin-left: #{$mx * 1px};
						margin-right: #{$mx * 1px};

						&-neg {
							margin-left: -#{$mx * 1px};
							margin-right: -#{$mx * 1px};
						}
					}
				}

				@for $mx from 0 through 15 {
					&-#{$mx}r {
						margin-left: #{$mx * 1rem};
						margin-right: #{$mx * 1rem};

						&-neg {
							margin-left: -#{$mx * 1rem};
							margin-right: -#{$mx * 1rem};
						}
					}
				}

				@for $mx from 0 through 15 {
					&-#{$mx}em {
						margin-left: #{$mx * 1em};
						margin-right: #{$mx * 1em};

						&-neg {
							margin-left: -#{$mx * 1em};
							margin-right: -#{$mx * 1em};
						}
					}
				}

				&-a,
				&-auto {
					margin-left: auto;
					margin-right: auto;
				}

				&-0 {
					margin-left: 0;
					margin-right: 0;
				}
			}

			// Top
			&t {
				@for $mt from 0 through 5 {
					&-#{$mt} {
						margin-top: #{$mt * 1%};

						&-neg {
							margin-top: -#{$mt * 1%};
						}
					}
				}

				@for $mt from 0 through 300 {
					&-#{$mt}px {
						margin-top: #{$mt * 1px};

						&-neg {
							margin-top: -#{$mt * 1px};
						}
					}
				}

				@for $mt from 0 through 15 {
					&-#{$mt}r {
						margin-top: #{$mt * 1rem};

						&-neg {
							margin-top: -#{$mt * 1rem};
						}
					}
				}

				@for $mt from 0 through 15 {
					&-#{$mt}em {
						margin-top: #{$mt * 1em};

						&-neg {
							margin-top: -#{$mt * 1em};
						}
					}
				}

				&-a,
				&-auto {
					margin-top: auto;
				}

				&-0 {
					margin-top: 0;
				}
			}

			// Right
			&r {
				@for $mr from 0 through 100 {
					&-#{$mr} {
						margin-right: #{$mr * 1%};

						&-neg {
							margin-right: -#{$mr * 1%};
						}
					}
				}

				@for $mr from 0 through 300 {
					&-#{$mr}px {
						margin-right: #{$mr * 1px};

						&-neg {
							margin-right: -#{$mr * 1px};
						}
					}
				}

				@for $mr from 0 through 100 {
					&-#{$mr}r {
						margin-right: #{$mr * 1rem};

						&-neg {
							margin-right: -#{$mr * 1rem};
						}
					}
				}

				@for $mr from 0 through 100 {
					&-#{$mr}em {
						margin-right: #{$mr * 1em};

						&-neg {
							margin-right: -#{$mr * 1em};
						}
					}
				}

				&-a,
				&-auto {
					margin-right: auto;
				}

				&-0 {
					margin-right: 0;
				}
			}

			// Bottom
			&b {
				@for $mb from 0 through 5 {
					&-#{$mb} {
						margin-bottom: #{$mb * 1%};

						&-neg {
							margin-bottom: -#{$mb * 1%};
						}
					}
				}

				@for $mb from 0 through 300 {
					&-#{$mb}px {
						margin-bottom: #{$mb * 1px};

						&-neg {
							margin-bottom: -#{$mb * 1px};
						}
					}
				}

				@for $mb from 0 through 15 {
					&-#{$mb}r {
						margin-bottom: #{$mb * 1rem};

						&-neg {
							margin-bottom: -#{$mb * 1rem};
						}
					}
				}

				@for $mb from 0 through 15 {
					&-#{$mb}em {
						margin-bottom: #{$mb * 1em};

						&-neg {
							margin-bottom: -#{$mb * 1em};
						}
					}
				}

				&-a,
				&-auto {
					margin-bottom: auto;
				}

				&-0 {
					margin-bottom: 0;
				}
			}

			// Left
			&l {
				@for $ml from 0 through 5 {
					&-#{$ml} {
						margin-left: #{$ml * 1%};

						&-neg {
							margin-left: -#{$ml * 1%};
						}
					}
				}

				@for $ml from 0 through 300 {
					&-#{$ml}px {
						margin-left: #{$ml * 1px};

						&-neg {
							margin-left: -#{$ml * 1px};
						}
					}
				}

				@for $ml from 0 through 15 {
					&-#{$ml}r {
						margin-left: #{$ml * 1rem};

						&-neg {
							margin-left: -#{$ml * 1rem};
						}
					}
				}

				@for $ml from 0 through 15 {
					&-#{$ml}r {
						margin-left: #{$ml * 1em};

						&-neg {
							margin-left: -#{$ml * 1em};
						}
					}
				}

				&-a,
				&-auto {
					margin-left: auto;
				}

				&-0 {
					margin-left: 0;
				}
			}
		}
	}
}

@include mix.responsive(){
	.\!mob\: {
		&m {

			// General
			@for $m from 0 through 5 {
				&-#{$m} {
					margin: #{$m * 1%}!important;

					&-neg {
						margin: -#{$m * 1%}!important;
					}
				}
			}

			@for $m from 0 through 300 {
				&-#{$m}px {
					margin: #{$m * 1px}!important;

					&-neg {
						margin: -#{$m * 1px}!important;
					}
				}
			}

			@for $m from 0 through 15 {
				&-#{$m}r {
					margin: #{$m * 1rem}!important;

					&-neg {
						margin: -#{$m * 1rem}!important;
					}
				}
			}

			@for $m from 0 through 15 {
				&-#{$m}em {
					margin: #{$m * 1em}!important;

					&-neg {
						margin: -#{$m * 1em}!important;
					}
				}
			}

			&-a,
			&-auto {
				margin: auto!important;
			}

			&-0 {
				margin: 0 !important;
			}

			// Y-Axis
			&y {
				@for $my from 0 through 5 {
					&-#{$my} {
						margin-top: #{$my * 1%}!important;
						margin-bottom: #{$my * 1%}!important;

						&-neg {
							margin-top: -#{$my * 1%}!important;
							margin-bottom: -#{$my * 1%}!important;
						}
					}
				}

				@for $my from 0 through 300 {
					&-#{$my}px {
						margin-top: #{$my * 1px}!important;
						margin-bottom: #{$my * 1px}!important;

						&-neg {
							margin-top: -#{$my * 1px}!important;
							margin-bottom: -#{$my * 1px}!important;
						}
					}
				}

				@for $my from 0 through 15 {
					&-#{$my}r {
						margin-top: #{$my * 1rem}!important;
						margin-bottom: #{$my * 1rem}!important;

						&-neg {
							margin-top: -#{$my * 1rem}!important;
							margin-bottom: -#{$my * 1rem}!important;
						}
					}
				}

				@for $my from 0 through 15 {
					&-#{$my}em {
						margin-top: #{$my * 1em}!important;
						margin-bottom: #{$my * 1em}!important;

						&-neg {
							margin-top: -#{$my * 1em}!important;
							margin-bottom: -#{$my * 1em}!important;
						}
					}
				}

				&-a,
				&-auto {
					margin-top: auto!important;
					margin-bottom: auto!important;
				}

				&-0 {
					margin-top: 0!important;
					margin-bottom: 0!important;
				}
			}

			// X-Axis
			&x {
				@for $mx from 0 through 5 {
					&-#{$mx} {
						margin-left: #{$mx * 1%}!important;
						margin-right: #{$mx * 1%}!important;

						&-neg {
							margin-left: -#{$mx * 1%}!important;
							margin-right: -#{$mx * 1%}!important;
						}
					}
				}

				@for $mx from 0 through 300 {
					&-#{$mx}px {
						margin-left: #{$mx * 1px}!important;
						margin-right: #{$mx * 1px}!important;

						&-neg {
							margin-left: -#{$mx * 1px}!important;
							margin-right: -#{$mx * 1px}!important;
						}
					}
				}

				@for $mx from 0 through 15 {
					&-#{$mx}r {
						margin-left: #{$mx * 1rem}!important;
						margin-right: #{$mx * 1rem}!important;

						&-neg {
							margin-left: -#{$mx * 1rem}!important;
							margin-right: -#{$mx * 1rem}!important;
						}
					}
				}

				@for $mx from 0 through 15 {
					&-#{$mx}em {
						margin-left: #{$mx * 1em}!important;
						margin-right: #{$mx * 1em}!important;

						&-neg {
							margin-left: -#{$mx * 1em}!important;
							margin-right: -#{$mx * 1em}!important;
						}
					}
				}

				&-a,
				&-auto {
					margin-left: auto!important;
					margin-right: auto!important;
				}

				&-0 {
					margin-left: 0!important;
					margin-right: 0!important;
				}
			}

			// Top
			&t {
				@for $mt from 0 through 5 {
					&-#{$mt} {
						margin-top: #{$mt * 1%}!important;

						&-neg {
							margin-top: -#{$mt * 1%}!important;
						}
					}
				}

				@for $mt from 0 through 300 {
					&-#{$mt}px {
						margin-top: #{$mt * 1px}!important;

						&-neg {
							margin-top: -#{$mt * 1px}!important;
						}
					}
				}

				@for $mt from 0 through 15 {
					&-#{$mt}r {
						margin-top: #{$mt * 1rem}!important;

						&-neg {
							margin-top: -#{$mt * 1rem}!important;
						}
					}
				}

				@for $mt from 0 through 15 {
					&-#{$mt}em {
						margin-top: #{$mt * 1em}!important;

						&-neg {
							margin-top: -#{$mt * 1em}!important;
						}
					}
				}

				&-a,
				&-auto {
					margin-top: auto!important;
				}

				&-0 {
					margin-top: 0!important;
				}
			}

			// Right
			&r {
				@for $mr from 0 through 100 {
					&-#{$mr} {
						margin-right: #{$mr * 1%}!important;

						&-neg {
							margin-right: -#{$mr * 1%}!important;
						}
					}
				}

				@for $mr from 0 through 300 {
					&-#{$mr}px {
						margin-right: #{$mr * 1px}!important;

						&-neg {
							margin-right: -#{$mr * 1px}!important;
						}
					}
				}

				@for $mr from 0 through 100 {
					&-#{$mr}r {
						margin-right: #{$mr * 1rem}!important;

						&-neg {
							margin-right: -#{$mr * 1rem}!important;
						}
					}
				}

				@for $mr from 0 through 100 {
					&-#{$mr}em {
						margin-right: #{$mr * 1em}!important;

						&-neg {
							margin-right: -#{$mr * 1em}!important;
						}
					}
				}

				&-a,
				&-auto {
					margin-right: auto!important;
				}

				&-0 {
					margin-right: 0!important;
				}
			}

			// Bottom
			&b {
				@for $mb from 0 through 5 {
					&-#{$mb} {
						margin-bottom: #{$mb * 1%}!important;

						&-neg {
							margin-bottom: -#{$mb * 1%}!important;
						}
					}
				}

				@for $mb from 0 through 300 {
					&-#{$mb}px {
						margin-bottom: #{$mb * 1px}!important;

						&-neg {
							margin-bottom: -#{$mb * 1px}!important;
						}
					}
				}

				@for $mb from 0 through 15 {
					&-#{$mb}r {
						margin-bottom: #{$mb * 1rem}!important;

						&-neg {
							margin-bottom: -#{$mb * 1rem}!important;
						}
					}
				}

				@for $mb from 0 through 15 {
					&-#{$mb}em {
						margin-bottom: #{$mb * 1em}!important;

						&-neg {
							margin-bottom: -#{$mb * 1em}!important;
						}
					}
				}

				&-a,
				&-auto {
					margin-bottom: auto!important;
				}

				&-0 {
					margin-bottom: 0!important;
				}
			}

			// Left
			&l {
				@for $ml from 0 through 5 {
					&-#{$ml} {
						margin-left: #{$ml * 1%}!important;

						&-neg {
							margin-left: -#{$ml * 1%}!important;
						}
					}
				}

				@for $ml from 0 through 300 {
					&-#{$ml}px {
						margin-left: #{$ml * 1px}!important;

						&-neg {
							margin-left: -#{$ml * 1px}!important;
						}
					}
				}

				@for $ml from 0 through 15 {
					&-#{$ml}r {
						margin-left: #{$ml * 1rem}!important;

						&-neg {
							margin-left: -#{$ml * 1rem}!important;
						}
					}
				}

				@for $ml from 0 through 15 {
					&-#{$ml}r {
						margin-left: #{$ml * 1em}!important;

						&-neg {
							margin-left: -#{$ml * 1em}!important;
						}
					}
				}

				&-a,
				&-auto {
					margin-left: auto!important;
				}

				&-0 {
					margin-left: 0!important;
				}
			}
		}
	}
}

//* Displays:
// Configurações iniciais:
.dp {
	// Contents:
	&-contents {
		display: contents;
	}

	// Inlines:
	&-inline {
		display: inline;

		&-block {
			display: inline-block;
		}

		&-flex {
			display: inline-flex;
		}

		&-table {
			display: inline-table;
		}
	}

	// Block:
	&-block {
		display: block;
	}

	// Flex:
	&-flex {
		display: flex;
	}

	// Grid:
	&-grid {
		display: grid;
	}

	// Table:
	&-table {
		display: table;
	}
}

.\!dp {
	// Contents:
	&-contents {
		display: contents !important;
	}

	// Inlines:
	&-inline {
		display: inline !important;

		&-block {
			display: inline-block !important;
		}

		&-flex {
			display: inline-flex !important;
		}

		&-table {
			display: inline-table !important;
		}
	}

	// Block:
	&-block {
		display: block !important;
	}

	// Flex:
	&-flex {
		display: flex !important;
	}

	// Grid:
	&-grid {
		display: grid !important;
	}

	// Table:
	&-table {
		display: table !important;
	}
}

// Versão responsiva
@include mix.responsive() {
	.mob\:dp {
		// Contents:
		&-contents {
			display: contents;
		}

		// Inlines:
		&-inline {
			display: inline;

			&-block {
				display: inline-block;
			}

			&-flex {
				display: inline-flex;
			}

			&-table {
				display: inline-table;
			}
		}

		// Block:
		&-block {
			display: block;
		}

		// Flex:
		&-flex {
			display: flex;
		}

		// Grid:
		&-grid {
			display: grid;
		}

		// Table:
		&-table {
			display: table;
		}
	}

	// Versão responsiva com "!important"
	.mob\:\!dp {
		// Contents:
		&-contents {
			display: contents !important;
		}

		// Inlines:
		&-inline {
			display: inline !important;

			&-block {
				display: inline-block !important;
			}

			&-flex {
				display: inline-flex !important;
			}

			&-table {
				display: inline-table !important;
			}
		}

		// Block:
		&-block {
			display: block !important;
		}

		// Flex:
		&-flex {
			display: flex !important;
		}

		// Grid:
		&-grid {
			display: grid !important;
		}

		// Table:
		&-table {
			display: table !important;
		}
	}
}

// Configurações avançadas:
.dp,
.\!dp {
	// Grid: [https://webeponto.notion.site/Grid-c60674a00c174d0f8eba57775969e4db]
	&-grid {
		//	Alinhamento vertical (elemento mãe):
		.v {
			&-top {
				align-items: start;
			}

			&-center {
				align-items: center;
			}

			&-bottom {
				align-items: end;
			}

			&-stretch {
				align-items: stretch;
			}

			&-baseline {
				align-items: baseline;
			}
		}

		// Versão com "!important"
		.\!v {
			&-top {
				align-items: start !important;
			}

			&-center {
				align-items: center !important;
			}

			&-bottom {
				align-items: end !important;
			}

			&-stretch {
				align-items: stretch !important;
			}

			&-baseline {
				align-items: baseline !important;
			}
		}

		// Versão responsiva
		@include mix.responsive() {
			.mob\:v {
				&-top {
					align-items: start;
				}

				&-center {
					align-items: center;
				}

				&-bottom {
					align-items: end;
				}

				&-stretch {
					align-items: stretch;
				}

				&-baseline {
					align-items: baseline;
				}
			}

			// Versão responsiva com "!important"
			.mob\:\!v {
				&-top {
					align-items: start !important;
				}

				&-center {
					align-items: center !important;
				}

				&-bottom {
					align-items: end !important;
				}

				&-stretch {
					align-items: stretch !important;
				}

				&-baseline {
					align-items: baseline !important;
				}
			}
		}

		.h {
			&-left {
				justify-content: start;
			}

			&-center {
				justify-content: center;
			}

			&-right {
				justify-content: end;
			}

			&-between {
				justify-content: space-between;
			}
		}

		// Versão com "!important"
		.\!h {
			&-left {
				justify-content: start !important;
			}

			&-center {
				justify-content: center !important;
			}

			&-right {
				justify-content: end !important;
			}

			&-between {
				justify-content: space-between !important;
			}
		}

		// Versão responsiva
		@include mix.responsive() {
			.mob\:h {
				&-left {
					justify-content: start;
				}

				&-center {
					justify-content: center;
				}

				&-right {
					justify-content: end;
				}

				&-between {
					justify-content: space-between;
				}
			}

			// Versão responsiva com "!important"
			.mob\:\!h {
				&-left {
					justify-content: start !important;
				}

				&-center {
					justify-content: center !important;
				}

				&-right {
					justify-content: end !important;
				}

				&-between {
					justify-content: space-between !important;
				}
			}
		}

		// Alinhamento de renderização (elemento mãe):
		&.ltr {
			direction: ltr;
		}

		&.rtl {
			direction: rtl;
		}

		@include mix.responsive() {
			.mob\:ltr {
				direction: ltr;
			}

			.mob\:rtl {
				direction: rtl;
			}
		}

		// Definições de tamanhos em linhas/colunas:
		&.row {
			@for $row from 0 through 30 {
				&-#{$row} {
					grid-template-rows: repeat(#{$row}, minmax(0, 1fr));
				}
			}
		}

		@include mix.responsive() {
			&.mob\:row {
				@for $row from 0 through 30 {
					&-#{$row} {
						grid-template-rows: repeat(#{$row}, minmax(0, 1fr));
					}
				}
			}
		}

		&.col {
			@for $col from 0 through 30 {
				&-#{$col} {
					grid-template-columns: repeat(#{$col}, minmax(0, 1fr));
				}
			}
		}

		@include mix.responsive() {
			&.mob\:col {
				@for $col from 0 through 30 {
					&-#{$col} {
						grid-template-columns: repeat(#{$col}, minmax(0, 1fr));
					}
				}
			}
		}

		// Definições de atribuição de proporções:
		.span {
			&-col {
				@for $span from 0 through 3 {
					&-#{$span} {
						grid-column: span #{$span};
					}
				}
			}

			&-row {
				@for $span from 0 through 3 {
					&-#{$span} {
						grid-row: span #{$span};
					}
				}
			}
		}

		@include mix.responsive() {
			.mob\:span {
				&-col {
					@for $span from 0 through 3 {
						&-#{$span} {
							grid-column: span #{$span};
						}
					}
				}

				&-row {
					@for $span from 0 through 3 {
						&-#{$span} {
							grid-row: span #{$span};
						}
					}
				}
			}
		}

		// Definições da alimentação de conteúdo (elemento mãe):
		&.flow {
			&-row {
				grid-auto-flow: row;
			}

			&-col {
				grid-auto-flow: column;
			}

			&-dense {
				grid-auto-flow: dense;

				&-row {
					grid-auto-flow: row dense;
				}

				&-col {
					grid-auto-flow: column dense;
				}
			}
		}

		@include mix.responsive() {
			&.mob\:flow {
				&-row {
					grid-auto-flow: row;
				}

				&-col {
					grid-auto-flow: column;
				}

				&-dense {
					grid-auto-flow: dense;

					&-row {
						grid-auto-flow: row dense;
					}

					&-col {
						grid-auto-flow: column dense;
					}
				}
			}
		}

		// Espaçamento entre elementos (elemento mãe):
		&.gap {
			&-r {
				@for $g from 0 through 5 {
					&-#{$g} {
						grid-row-gap: #{$g * 1%};
					}
				}

				@for $g from 0 through 100 {
					&-#{$g}px {
						grid-row-gap: #{$g * 1px};
					}
				}

				@for $g from 0 through 15 {
					&-#{$g}r {
						grid-row-gap: #{$g * 1rem};
					}
				}

				@for $g from 0 through 15 {
					&-#{$g}em {
						grid-row-gap: #{$g * 1em};
					}
				}
			}

			&-c {
				@for $g from 0 through 5 {
					&-#{$g} {
						grid-column-gap: #{$g * 1%};
					}
				}

				@for $g from 0 through 100 {
					&-#{$g}px {
						grid-column-gap: #{$g * 1px};
					}
				}

				@for $g from 0 through 15 {
					&-#{$g}r {
						grid-column-gap: #{$g * 1rem};
					}
				}

				@for $g from 0 through 15 {
					&-#{$g}em {
						grid-column-gap: #{$g * 1em};
					}
				}
			}
		}

		@include mix.responsive() {
			&.mob\:gap {
				&-r {
					@for $g from 0 through 5 {
						&-#{$g} {
							grid-row-gap: #{$g * 1%};
						}
					}

					@for $g from 0 through 100 {
						&-#{$g}px {
							grid-row-gap: #{$g * 1px};
						}
					}

					@for $g from 0 through 15 {
						&-#{$g}r {
							grid-row-gap: #{$g * 1rem};
						}
					}

					@for $g from 0 through 15 {
						&-#{$g}em {
							grid-row-gap: #{$g * 1em};
						}
					}
				}

				&-c {
					@for $g from 0 through 5 {
						&-#{$g} {
							grid-column-gap: #{$g * 1%};
						}
					}

					@for $g from 0 through 100 {
						&-#{$g}px {
							grid-column-gap: #{$g * 1px};
						}
					}

					@for $g from 0 through 15 {
						&-#{$g}r {
							grid-column-gap: #{$g * 1rem};
						}
					}

					@for $g from 0 through 15 {
						&-#{$g}em {
							grid-column-gap: #{$g * 1em};
						}
					}
				}
			}
		}
	}

	// Table:
	&-table {
		// Renderização de células:
		&.collapse {
			border-collapse: collapse;
		}

		&.separate {
			border-collapse: separate;
		}

		@include mix.responsive() {
			&.mob\:collapse {
				border-collapse: collapse;
			}

			&.mob\:separate {
				border-collapse: separate;
			}
		}

		// Espaçamento de celulas (Somente aplicável com '.separate'):
		&.gap {
			@for $g from 0 through 5 {
				&-#{$g} {
					border-spacing: #{$g * 1%};
				}
			}

			@for $g from 0 through 100 {
				&-#{$g}px {
					border-spacing: #{$g * 1px};
				}
			}

			@for $g from 0 through 15 {
				&-#{$g}r {
					border-spacing: #{$g * 1rem};
				}
			}

			@for $g from 0 through 15 {
				&-#{$g}em {
					border-spacing: #{$g * 1em};
				}
			}
		}

		@include mix.responsive() {
			&.mob\:gap {
				@for $g from 0 through 5 {
					&-#{$g} {
						border-spacing: #{$g * 1%};
					}
				}

				@for $g from 0 through 100 {
					&-#{$g}px {
						border-spacing: #{$g * 1px};
					}
				}

				@for $g from 0 through 15 {
					&-#{$g}r {
						border-spacing: #{$g * 1rem};
					}
				}
			}
		}

		// Legenda/título da tabela:
		&.title {
			&-first {
				caption-side: top;
			}

			&-last {
				caption-side: bottom;
			}
		}

		@include mix.responsive() {
			&.mob\:title {
				&-first {
					caption-side: top;
				}

				&-last {
					caption-side: bottom;
				}
			}
		}

		// Algoritmo de dimensionamento da coluna:
		&.col {
			&-auto {
				table-layout: auto;
			}

			&-fixed {
				table-layout: fixed;
			}
		}

		@include mix.responsive() {
			&.mob\:col {
				&-auto {
					table-layout: auto;
				}

				&-fixed {
					table-layout: fixed;
				}
			}
		}

		// Displays complementares:
		.row {
			display: table-row;

			.cell {
				display: table-cell;
			}
		}
	}

	//* Configurações Múltiplas:
	// Flex: [https://webeponto.notion.site/Flex-1f86c47e430f4d6987aa112b17bad82e]
	// Grid: [https://webeponto.notion.site/Grid-c60674a00c174d0f8eba57775969e4db]
	&-flex,
	&-grid {
		// Espaçamentos entre elementos (elemento mãe):
		&.gap,
		& .gap {
			@for $g from 0 through 5 {
				&-#{$g} {
					gap: #{$g * 1%};

					&-neg {
						gap: -#{$g * 1%};
					}
				}
			}

			@for $g from 0 through 100 {
				&-#{$g}px {
					gap: #{$g * 1px};

					&-neg {
						gap: -#{$g * 1px};
					}
				}
			}

			@for $g from 0 through 15 {
				&-#{$g}r {
					gap: #{$g * 1rem};

					&-neg {
						gap: -#{$g * 1rem};
					}
				}
			}

			@for $g from 0 through 15 {
				&-#{$g}em {
					gap: #{$g * 1em};

					&-neg {
						gap: -#{$g * 1em};
					}
				}
			}
		}

		// Versão com "!important"
		&.\!gap,
		& .\!gap {
			@for $g from 0 through 5 {
				&-#{$g} {
					gap: #{$g * 1%} !important;

					&-neg {
						gap: -#{$g * 1%} !important;
					}
				}
			}

			@for $g from 0 through 100 {
				&-#{$g}px {
					gap: #{$g * 1px} !important;

					&-neg {
						gap: -#{$g * 1px} !important;
					}
				}
			}

			@for $g from 0 through 15 {
				&-#{$g}r {
					gap: #{$g * 1rem} !important;

					&-neg {
						gap: -#{$g * 1rem} !important;
					}
				}
			}

			@for $g from 0 through 15 {
				&-#{$g}em {
					gap: #{$g * 1em} !important;

					&-neg {
						gap: -#{$g * 1em} !important;
					}
				}
			}
		}

		// Versão para responsivo
		@include mix.responsive() {
			&.mob\:gap,
			& .mob\:gap {
				@for $g from 0 through 5 {
					&-#{$g} {
						gap: #{$g * 1%};

						&-neg {
							gap: -#{$g * 1%};
						}
					}
				}

				@for $g from 0 through 100 {
					&-#{$g}px {
						gap: #{$g * 1px};

						&-neg {
							gap: -#{$g * 1px};
						}
					}
				}

				@for $g from 0 through 15 {
					&-#{$g}r {
						gap: #{$g * 1rem};

						&-neg {
							gap: -#{$g * 1rem};
						}
					}
				}

				@for $g from 0 through 15 {
					&-#{$g}em {
						gap: #{$g * 1em};

						&-neg {
							gap: -#{$g * 1em};
						}
					}
				}
			}

			// Versão responsiva com "!important"
			&.mob\:\!gap,
			& .mob\:\!gap {
				@for $g from 0 through 5 {
					&-#{$g} {
						gap: #{$g * 1%} !important;

						&-neg {
							gap: -#{$g * 1%} !important;
						}
					}
				}

				@for $g from 0 through 100 {
					&-#{$g}px {
						gap: #{$g * 1px} !important;

						&-neg {
							gap: -#{$g * 1px} !important;
						}
					}
				}

				@for $g from 0 through 15 {
					&-#{$g}r {
						gap: #{$g * 1rem} !important;

						&-neg {
							gap: -#{$g * 1rem} !important;
						}
					}
				}

				@for $g from 0 through 15 {
					&-#{$g}em {
						gap: #{$g * 1em} !important;

						&-neg {
							gap: -#{$g * 1em} !important;
						}
					}
				}
			}
		}

	}

	// Flex & Inline-Flex: [https://webeponto.notion.site/Flex-1f86c47e430f4d6987aa112b17bad82e]
	&-flex,
	&-inline-flex {
		box-sizing: border-box;
		align-items: center;

		//* Orientação linha/coluna:
		&.row {
			flex-direction: row;

			&-r {
				flex-direction: row-reverse;

				//*	Alinhamento vertical (elemento mãe reverso):
				&.v {
					&-top {
						align-items: flex-start;
					}

					&-center {
						align-items: center;
					}

					&-bottom {
						align-items: flex-end;
					}

					&-stretch {
						align-items: stretch;
					}
				}

				@include mix.responsive() {
					&.mob\:v {
						&-top {
							align-items: flex-start;
						}

						&-center {
							align-items: center;
						}

						&-bottom {
							align-items: flex-end;
						}

						&-stretch {
							align-items: stretch;
						}
					}
				}

				//*	Alinhamento horizontal (elemento mãe reverso):
				&.h {
					&-left {
						justify-content: flex-start;
					}

					&-center {
						justify-content: center;
					}

					&-right {
						justify-content: flex-end;
					}

					&-between {
						justify-content: space-between;
					}

					&-around {
						justify-content: space-around;
					}

					&-evenly {
						justify-content: space-evenly;
					}
				}

				@include mix.responsive() {
					&.mob\:h {
						&-left {
							justify-content: flex-start;
						}

						&-center {
							justify-content: center;
						}

						&-right {
							justify-content: flex-end;
						}

						&-between {
							justify-content: space-between;
						}

						&-around {
							justify-content: space-around;
						}

						&-evenly {
							justify-content: space-evenly;
						}
					}
				}
			}

			//* Alinhamento vertical (elemento mãe)
			&.v {
				&-top {
					align-items: flex-start;
				}

				&-center {
					align-items: center;
				}

				&-bottom {
					align-items: flex-end;
				}

				&-stretch {
					align-items: stretch;
				}
			}

			//* Versão com "!important"
			&.\!v {
				&-top {
					align-items: flex-start !important;
				}

				&-center {
					align-items: center !important;
				}

				&-bottom {
					align-items: flex-end !important;
				}

				&-stretch {
					align-items: stretch !important;
				}
			}

			//* Versão responsiva para alinhamento vertical
			@include mix.responsive() {
				&.mob\:v {
					&-top {
						align-items: flex-start;
					}

					&-center {
						align-items: center;
					}

					&-bottom {
						align-items: flex-end;
					}

					&-stretch {
						align-items: stretch;
					}
				}

				// Versão responsiva com "!important"
				&.mob\:\!v {
					&-top {
						align-items: flex-start !important;
					}

					&-center {
						align-items: center !important;
					}

					&-bottom {
						align-items: flex-end !important;
					}

					&-stretch {
						align-items: stretch !important;
					}
				}
			}

			//* Alinhamento horizontal (elemento mãe)
			&.h {
				&-left {
					justify-content: flex-start;
				}

				&-center {
					justify-content: center;
				}

				&-right {
					justify-content: flex-end;
				}

				&-between {
					justify-content: space-between;
				}

				&-around {
					justify-content: space-around;
				}

				&-evenly {
					justify-content: space-evenly;
				}
			}

			//* Versão com "!important" para alinhamento horizontal
			&.\!h {
				&-left {
					justify-content: flex-start !important;
				}

				&-center {
					justify-content: center !important;
				}

				&-right {
					justify-content: flex-end !important;
				}

				&-between {
					justify-content: space-between !important;
				}

				&-around {
					justify-content: space-around !important;
				}

				&-evenly {
					justify-content: space-evenly !important;
				}
			}

			//* Versão responsiva para alinhamento horizontal
			@include mix.responsive() {
				&.mob\:h {
					&-left {
						justify-content: flex-start;
					}

					&-center {
						justify-content: center;
					}

					&-right {
						justify-content: flex-end;
					}

					&-between {
						justify-content: space-between;
					}

					&-around {
						justify-content: space-around;
					}

					&-evenly {
						justify-content: space-evenly;
					}
				}

				// Versão responsiva com "!important"
				&.mob\:\!h {
					&-left {
						justify-content: flex-start !important;
					}

					&-center {
						justify-content: center !important;
					}

					&-right {
						justify-content: flex-end !important;
					}

					&-between {
						justify-content: space-between !important;
					}

					&-around {
						justify-content: space-around !important;
					}

					&-evenly {
						justify-content: space-evenly !important;
					}
				}
			}
		}

		&.col {
			flex-direction: column;

			&-r {
				flex-direction: column-reverse;

				//*	Alinhamento vertical (elemento mãe reverso):
				&.v {
					&-top {
						justify-content: flex-start;
					}

					&-center {
						justify-content: center;
					}

					&-bottom {
						justify-content: flex-end;
					}

					&-between {
						justify-content: space-between;
					}

					&-around {
						justify-content: space-around;
					}

					&-evenly {
						justify-content: space-evenly;
					}
				}

				@include mix.responsive() {
					&.mob\:v {
						&-top {
							justify-content: flex-start;
						}

						&-center {
							justify-content: center;
						}

						&-bottom {
							justify-content: flex-end;
						}

						&-between {
							justify-content: space-between;
						}

						&-around {
							justify-content: space-around;
						}

						&-evenly {
							justify-content: space-evenly;
						}
					}
				}

				//*	Alinhamento horizontal (elemento mãe reverso):
				&.h {
					&-left {
						align-items: flex-start;
					}

					&-center {
						align-items: center;
					}

					&-right {
						align-items: flex-end;
					}

					&-stretch {
						align-items: stretch;
					}
				}

				@include mix.responsive() {
					&.mob\:h {
						&-left {
							align-items: flex-start;
						}

						&-center {
							align-items: center;
						}

						&-right {
							align-items: flex-end;
						}

						&-stretch {
							align-items: stretch;
						}
					}
				}
			}

			//* Alinhamento vertical (elemento mãe)
			&.v {
				&-top {
					justify-content: flex-start;
				}

				&-center {
					justify-content: center;
				}

				&-bottom {
					justify-content: flex-end;
				}

				&-between {
					justify-content: space-between;
				}

				&-around {
					justify-content: space-around;
				}

				&-evenly {
					justify-content: space-evenly;
				}
			}

			//* Versão com "!important" para alinhamento vertical
			&.\!v {
				&-top {
					justify-content: flex-start !important;
				}

				&-center {
					justify-content: center !important;
				}

				&-bottom {
					justify-content: flex-end !important;
				}

				&-between {
					justify-content: space-between !important;
				}

				&-around {
					justify-content: space-around !important;
				}

				&-evenly {
					justify-content: space-evenly !important;
				}
			}

			//* Versão responsiva para alinhamento vertical
			@include mix.responsive() {
				&.mob\:v {
					&-top {
						justify-content: flex-start;
					}

					&-center {
						justify-content: center;
					}

					&-bottom {
						justify-content: flex-end;
					}

					&-between {
						justify-content: space-between;
					}

					&-around {
						justify-content: space-around;
					}

					&-evenly {
						justify-content: space-evenly;
					}
				}

				// Versão responsiva com "!important" para alinhamento vertical
				&.mob\:\!v {
					&-top {
						justify-content: flex-start !important;
					}

					&-center {
						justify-content: center !important;
					}

					&-bottom {
						justify-content: flex-end !important;
					}

					&-between {
						justify-content: space-between !important;
					}

					&-around {
						justify-content: space-around !important;
					}

					&-evenly {
						justify-content: space-evenly !important;
					}
				}
			}

			//* Alinhamento horizontal (elemento mãe)
			&.h {
				&-left {
					align-items: flex-start;
				}

				&-center {
					align-items: center;
				}

				&-right {
					align-items: flex-end;
				}

				&-stretch {
					align-items: stretch;
				}
			}

			//* Versão com "!important" para alinhamento horizontal
			&.\!h {
				&-left {
					align-items: flex-start !important;
				}

				&-center {
					align-items: center !important;
				}

				&-right {
					align-items: flex-end !important;
				}

				&-stretch {
					align-items: stretch !important;
				}
			}

			//* Versão responsiva para alinhamento horizontal
			@include mix.responsive() {
				&.mob\:h {
					&-left {
						align-items: flex-start;
					}

					&-center {
						align-items: center;
					}

					&-right {
						align-items: flex-end;
					}

					&-stretch {
						align-items: stretch;
					}
				}

				// Versão responsiva com "!important" para alinhamento horizontal
				&.mob\:\!h {
					&-left {
						align-items: flex-start !important;
					}

					&-center {
						align-items: center !important;
					}

					&-right {
						align-items: flex-end !important;
					}

					&-stretch {
						align-items: stretch !important;
					}
				}
			}

		}

		@include mix.responsive() {
			&.mob\:row {
				flex-direction: row;

				&-r {
					flex-direction: row-reverse;

					&.mob\:v {
						&-top {
							align-items: flex-start;
						}

						&-center {
							align-items: center;
						}

						&-bottom {
							align-items: flex-end;
						}

						&-stretch {
							align-items: stretch;
						}
					}

					&.mob\:h {
						&-left {
							justify-content: flex-start;
						}

						&-center {
							justify-content: center;
						}

						&-right {
							justify-content: flex-end;
						}

						&-between {
							justify-content: space-between;
						}

						&-around {
							justify-content: space-around;
						}

						&-evenly {
							justify-content: space-evenly;
						}
					}
				}

				//* Alinhamento vertical (elemento mãe)
				&.mob\:v {
					&-top {
						align-items: flex-start;
					}

					&-center {
						align-items: center;
					}

					&-bottom {
						align-items: flex-end;
					}

					&-stretch {
						align-items: stretch;
					}
				}

				//* Versão com "!important"
				&.mob\:\!v {
					&-top {
						align-items: flex-start !important;
					}

					&-center {
						align-items: center !important;
					}

					&-bottom {
						align-items: flex-end !important;
					}

					&-stretch {
						align-items: stretch !important;
					}
				}

				&.mob\:h {
					&-left {
						justify-content: flex-start;
					}

					&-center {
						justify-content: center;
					}

					&-right {
						justify-content: flex-end;
					}

					&-between {
						justify-content: space-between;
					}

					&-around {
						justify-content: space-around;
					}

					&-evenly {
						justify-content: space-evenly;
					}
				}

				//* Alinhamento horizontal (elemento mãe)
				&.h {
					&-left {
						justify-content: flex-start;
					}

					&-center {
						justify-content: center;
					}

					&-right {
						justify-content: flex-end;
					}

					&-between {
						justify-content: space-between;
					}

					&-around {
						justify-content: space-around;
					}

					&-evenly {
						justify-content: space-evenly;
					}
				}

				//* Versão com "!important" para alinhamento horizontal
				&.\!h {
					&-left {
						justify-content: flex-start !important;
					}

					&-center {
						justify-content: center !important;
					}

					&-right {
						justify-content: flex-end !important;
					}

					&-between {
						justify-content: space-between !important;
					}

					&-around {
						justify-content: space-around !important;
					}

					&-evenly {
						justify-content: space-evenly !important;
					}
				}
			}
			
			&.mob\:col {
				flex-direction: column;

				&-r {
					flex-direction: column-reverse;

					&.mob\:v {
						&-top {
							justify-content: flex-start;
						}

						&-center {
							justify-content: center;
						}

						&-bottom {
							justify-content: flex-end;
						}

						&-between {
							justify-content: space-between;
						}

						&-around {
							justify-content: space-around;
						}

						&-evenly {
							justify-content: space-evenly;
						}
					}

					&.mob\:h {
						&-left {
							align-items: flex-start;
						}

						&-center {
							align-items: center;
						}

						&-right {
							align-items: flex-end;
						}

						&-stretch {
							align-items: stretch;
						}
					}
				}

				//* Alinhamento vertical (elemento mãe)
				&.mob\:v {
					&-top {
						justify-content: flex-start;
					}

					&-center {
						justify-content: center;
					}

					&-bottom {
						justify-content: flex-end;
					}

					&-between {
						justify-content: space-between;
					}

					&-around {
						justify-content: space-around;
					}

					&-evenly {
						justify-content: space-evenly;
					}
				}

				//* Versão com "!important" para alinhamento vertical
				&.mob\:\!v {
					&-top {
						justify-content: flex-start !important;
					}

					&-center {
						justify-content: center !important;
					}

					&-bottom {
						justify-content: flex-end !important;
					}

					&-between {
						justify-content: space-between !important;
					}

					&-around {
						justify-content: space-around !important;
					}

					&-evenly {
						justify-content: space-evenly !important;
					}
				}

				//* Alinhamento horizontal (elemento mãe)
				&.mob\:h {
					&-left {
						align-items: flex-start;
					}

					&-center {
						align-items: center;
					}

					&-right {
						align-items: flex-end;
					}

					&-stretch {
						align-items: stretch;
					}
				}

				//* Versão com "!important" para alinhamento horizontal
				&.mob\:\!h {
					&-left {
						align-items: flex-start !important;
					}

					&-center {
						align-items: center !important;
					}

					&-right {
						align-items: flex-end !important;
					}

					&-stretch {
						align-items: stretch !important;
					}
				}
			}
		}

		//*	Alinhamento vertical/horizontal (elemento filho):
		& .vs {
			&-top {
				justify-self: flex-start;
			}

			&-center {
				justify-self: center;
			}

			&-bottom {
				justify-self: flex-end;
			}

			&-stretch {
				justify-self: stretch;
			}
		}

		@include mix.responsive() {
			& .mob\:vs {
				&-top {
					justify-self: flex-start;
				}

				&-center {
					justify-self: center;
				}

				&-bottom {
					justify-self: flex-end;
				}

				&-stretch {
					justify-self: stretch;
				}
			}
		}

		& .hs {
			&-left {
				align-self: flex-start;
			}

			&-center {
				align-self: center;
			}

			&-right {
				align-self: flex-end;
			}

			&-stretch {
				align-self: stretch;
			}
		}

		@include mix.responsive() {
			& .mob\:hs {
				&-left {
					align-self: flex-start;
				}

				&-center {
					align-self: center;
				}

				&-right {
					align-self: flex-end;
				}

				&-stretch {
					align-self: stretch;
				}
			}
		}

		//* Disposição de conteúdo:
		&.wrap {
			flex-wrap: wrap;
		}

		&.no-wrap {
			flex-wrap: nowrap;
		}

		&.wrap-r {
			flex-wrap: wrap-reverse;
		}

		@include mix.responsive() {
			&.mob\:wrap {
				flex-wrap: wrap;
			}

			&.mob\:no-wrap {
				flex-wrap: nowrap;
			}

			&.mob\:wrap-r {
				flex-wrap: wrap-reverse;
			}
		}

		//* Ordenação de elementos Flex:
		.order {
			@for $o from 0 through 100 {
				&-#{$o} {
					order: #{$o};

					&-neg{
						order: -#{$o};
					}
				}
			}
		}

		@include mix.responsive() {
			.mob\:order {
				@for $o from 0 through 100 {
					&-#{$o} {
						order: #{$o};
					}
				}
			}
		}

		//* Crescimento de elementos (elemento filho):
		.grow {
			@for $g from 0 through 10 {
				&-#{$g} {
					flex-grow: #{$g};
				}
			}
		}
	}

	// Inline, Inline-Block & Table Cell:
	&-inline,
	&-inline-block,
	&-table-cell {
		.v {
			&-super {
				vertical-align: super;
			}

			&-top {
				vertical-align: top;

				&-text {
					vertical-align: text-top;
				}
			}

			&-center {
				vertical-align: middle;
			}

			&-baseline {
				vertical-align: baseline;
			}

			&-sub {
				vertical-align: sub;
			}

			&-bottom {
				vertical-align: bottom;

				&-text {
					vertical-align: text-bottom;
				}
			}

			&-baseline {
				vertical-align: baseline;
			}
		}
	}
}

@include mix.responsive() {
	.mob\: {
		&dp,
		&\!dp {

			// Flex & Grid:
			&-flex,
			&-grid {

				// Espaçamentos entre elementos (elemento mãe):
				&.mob\:gap,
				& .mob\:gap {
					@for $g from 0 through 5 {
						&-#{$g} {
							gap: #{$g * 1%};
						}
					}

					@for $g from 0 through 100 {
						&-#{$g}px {
							gap: #{$g * 1px};
						}
					}

					@for $g from 0 through 15 {
						&-#{$g}r {
							gap: #{$g * 1rem};
						}
					}
				}
			}

			// Flex:
			&-flex {
				display: flex;
				box-sizing: border-box;
				align-items: center;

				// Orientação linha/coluna:
				&.mob\:row {
					flex-direction: row;

					&-r {
						flex-direction: row-reverse;

						// Alinhamento vertical (elemento mãe reverso):
						&.mob\:v {
							&-top {
								align-items: flex-start;
							}

							&-center {
								align-items: center;
							}

							&-bottom {
								align-items: flex-end;
							}

							&-stretch {
								align-items: stretch;
							}
						}

						//	Alinhamento horizontal (elemento mãe reverso):
						&.mob\:h {
							&-left {
								justify-content: flex-start;
							}

							&-center {
								justify-content: center;
							}

							&-right {
								justify-content: flex-end;
							}

							&-between {
								justify-content: space-between;
							}

							&-around {
								justify-content: space-around;
							}

							&-evenly {
								justify-content: space-evenly;
							}
						}
					}

					//	Alinhamento vertical (elemento mãe):
					&.mob\:v {
						&-top {
							align-items: flex-start;
						}

						&-center {
							align-items: center;
						}

						&-bottom {
							align-items: flex-end;
						}

						&-stretch {
							align-items: stretch;
						}
					}

					//	Alinhamento horizontal (elemento mãe):
					&.mob\:h {
						&-left {
							justify-content: flex-start;
						}

						&-center {
							justify-content: center;
						}

						&-right {
							justify-content: flex-end;
						}

						&-between {
							justify-content: space-between;
						}

						&-around {
							justify-content: space-around;
						}

						&-evenly {
							justify-content: space-evenly;
						}
					}
				}

				&.mob\:col {
					flex-direction: column;

					&-r {
						flex-direction: column-reverse;

						//	Alinhamento vertical (elemento mãe reverso):
						&.mob\:v {
							&-top {
								justify-content: flex-start;
							}

							&-center {
								justify-content: center;
							}

							&-bottom {
								justify-content: flex-end;
							}

							&-between {
								justify-content: space-between;
							}

							&-around {
								justify-content: space-around;
							}

							&-evenly {
								justify-content: space-evenly;
							}
						}

						//	Alinhamento horizontal (elemento mãe reverso):
						&.mob\:h {
							&-left {
								align-items: flex-start;
							}

							&-center {
								align-items: center;
							}

							&-right {
								align-items: flex-end;
							}

							&-stretch {
								align-items: stretch;
							}
						}
					}

					//	Alinhamento vertical (elemento mãe):
					&.mob\:v {
						&-top {
							justify-content: flex-start;
						}

						&-center {
							justify-content: center;
						}

						&-bottom {
							justify-content: flex-end;
						}

						&-between {
							justify-content: space-between;
						}

						&-around {
							justify-content: space-around;
						}

						&-evenly {
							justify-content: space-evenly;
						}
					}

					//	Alinhamento horizontal (elemento mãe):
					&.mob\:h {
						&-left {
							align-items: flex-start;
						}

						&-center {
							align-items: center;
						}

						&-right {
							align-items: flex-end;
						}

						&-stretch {
							align-items: stretch;
						}
					}
				}

				//	Alinhamento vertical/horizontal (elemento filho):
				& .mob\:vs {
					&-top {
						justify-self: flex-start;
					}

					&-center {
						justify-self: center;
					}

					&-bottom {
						justify-self: flex-end;
					}

					&-stretch {
						justify-self: stretch;
					}
				}

				& .mob\:hs {
					&-left {
						align-self: flex-start;
					}

					&-center {
						align-self: center;
					}

					&-right {
						align-self: flex-end;
					}

					&-stretch {
						align-self: stretch;
					}
				}

				// Disposição de conteúdo:
				&.mob\:wrap {
					flex-wrap: wrap;
				}

				&.mob\:no-wrap {
					flex-wrap: nowrap;
				}

				&.mob\:wrap-r {
					flex-wrap: wrap-reverse;
				}

				// Ordenação de elementos Flex:
				.mob\:order {
					@for $o from 0 through 100 {
						&-#{$o} {
							order: #{$o};
						}
					}
				}

				// Crescimento de elementos (elemento filho):
				.mob\:grow {
					@for $g from 0 through 10 {
						&-#{$g} {
							flex-grow: #{$g};
						}
					}
				}
			}

			// Grid:
			&-grid {
				display: grid;

				//	Alinhamento vertical (elemento mãe):
				&.mob\:v {
					&-top {
						align-items: start
					}

					&-center {
						align-items: start
					}

					&-bottom {
						align-items: end
					}

					&-stretch {
						align-items: stretch
					}

					&-baseline {
						align-items: baseline
					}
				}

				//	Alinhamento horizontal (elemento mãe):
				&.mob\:h {
					&-left {
						justify-content: start
					}

					&-center {
						justify-content: center
					}

					&-right {
						justify-content: end
					}

					&-between {
						justify-content: space-between
					}
				}

				// Definições de tamanhos em linhas/colunas:
				&.mob\:row {
					@for $row from 0 through 30 {
						&-#{$row} {
							grid-template-rows: repeat(#{$row}, minmax(0, 1fr));
						}
					}
				}

				&.mob\:col {
					@for $col from 0 through 30 {
						&-#{$col} {
							grid-template-columns: repeat(#{$col}, minmax(0, 1fr));
						}
					}
				}

				// Definições de atribuição de proporções:
				.mob\:span {
					&-col {
						@for $span from 0 through 3 {
							&-#{$span} {
								grid-column: span #{$span};
							}
						}
					}

					&-row {
						@for $span from 0 through 3 {
							&-#{$span} {
								grid-row: span #{$span};
							}
						}
					}
				}

				// Definições da alimentação de conteúdo (elemento mãe):
				&.mob\:flow {
					&-row {
						grid-auto-flow: row;
					}

					&-col {
						grid-auto-flow: column;
					}

					&-dense {
						grid-auto-flow: dense;

						&-row {
							grid-auto-flow: row dense;
						}

						&-col {
							grid-auto-flow: column dense;
						}
					}
				}

				// Espaçamento entre elementos (elemento mãe):
				&.mob\:gap {
					&-r {
						@for $g from 0 through 5 {
							&-#{$g} {
								grid-row-gap: #{$g * 1%};
							}
						}

						@for $g from 0 through 100 {
							&-#{$g}px {
								grid-row-gap: #{$g * 1px};
							}
						}

						@for $g from 0 through 15 {
							&-#{$g}r {
								grid-row-gap: #{$g * 1rem};
							}
						}
					}

					&-c {
						@for $g from 0 through 5 {
							&-#{$g} {
								grid-column-gap: #{$g * 1%};
							}
						}

						@for $g from 0 through 100 {
							&-#{$g}px {
								grid-column-gap: #{$g * 1px};
							}
						}

						@for $g from 0 through 15 {
							&-#{$g}r {
								grid-column-gap: #{$g * 1rem};
							}
						}
					}
				}
			}

			// Table:
			&-table {
				display: table;

				// Renderização de células:
				&.mob\:collapse {
					border-collapse: collapse;
				}

				&.mob\:separate {
					border-collapse: separate;
				}

				// Espaçamento de celulas (Somente aplicável com '.separate'):
				&.mob\:gap {
					@for $g from 0 through 5 {
						&-#{$g} {
							border-spacing: #{$g * 1%};
						}
					}

					@for $g from 0 through 100 {
						&-#{$g}px {
							border-spacing: #{$g * 1px};
						}
					}

					@for $g from 0 through 15 {
						&-#{$g}r {
							border-spacing: #{$g * 1rem};
						}
					}

					@for $g from 0 through 15 {
						&-#{$g}em {
							border-spacing: #{$g * 1em};
						}
					}
				}

				// Legenda/título da tabela:
				&.mob\:title {
					&-first {
						caption-side: top;
					}

					&-last {
						caption-side: bottom;
					}
				}

				// Algoritmo de dimensionamento da coluna:
				&.mob\:col {
					&-auto {
						table-layout: auto;
					}

					&-fixed {
						table-layout: fixed;
					}
				}

				// Displays complementares:
				.mob\:row {
					display: table-row;

					.mob\:cell {
						display: table-cell;
					}
				}
			}
		}
	}
}

//* Tamanhos: [https://webeponto.notion.site/Definindo-Tamanhos-896fc9400ad34d73a8db6b1863740659]
.w {
	@for $w from 0 through 19 {
		$v: $w * 5;

		&#{$v},
		&-#{$v} {
			width: #{$v * 1%};

			&-min {
				min-width: #{$v * 1%};
			}

			&-max {
				max-width: #{$v * 1%};
			}

			@for $p from 0 through 5 {
				&-#{$p} {
					width: #{($v - $p - $p) * 1%};
					margin-left: #{$p * 1%};
					margin-right: #{$p * 1%};

					@include mix.responsive() {
						&:not(.ignore-breakpoint) {
							width: 100%;
						}
					}
				}
			}
		}
	}

	&1\/3,
	&-33 {
		width: 33%;

		@for $p from 0 through 5 {
			&-#{$p} {
				width: #{(33 - $p - $p) * 1%};
				margin-left: #{$p * 1%};
				margin-right: #{$p * 1%};

				@include mix.responsive() {
					&:not(.ignore-breakpoint) {
						width: 100%;
					}
				}
			}
		}

		&-min {
			min-width: 33%;
		}

		&-max {
			max-width: 33%;
		}
	}

	&2\/3,
	&-66 {
		width: 66%;

		@for $p from 0 through 5 {
			&-#{$p} {
				width: #{(66 - $p - $p) * 1%};
				margin-left: #{$p * 1%};
				margin-right: #{$p * 1%};

				@include mix.responsive() {
					&:not(.ignore-breakpoint) {
						width: 100%;
					}
				}
			}
		}

		&-min {
			min-width: 66%;
		}

		&-max {
			max-width: 66%;
		}
	}

	@for $w from 0 through 20 {

		&#{$w}r,
		&-#{$w}r {
			width: #{$w * 1rem};

			&-min {
				min-width: #{$w * 1rem};
			}

			&-max {
				max-width: #{$w * 1rem};
			}

			@for $p from 0 through 5 {
				&-#{$p} {
					width: #{($w - $p) * 1rem};
					margin-left: #{$p * 1rem};
					margin-right: #{$p * 1rem};

					@include mix.responsive() {
						&:not(.ignore-breakpoint) {
							width: 100%;
						}
					}
				}
			}
		}
	}

	@for $w from 0 through 20 {

		&#{$w}em,
		&-#{$w}em {
			width: #{$w * 1em};

			&-min {
				min-width: #{$w * 1em};
			}

			&-max {
				max-width: #{$w * 1em};
			}

			@for $p from 0 through 5 {
				&-#{$p} {
					width: #{($w - $p) * 1em};
					margin-left: #{$p * 1em};
					margin-right: #{$p * 1em};

					@include mix.responsive() {
						&:not(.ignore-breakpoint) {
							width: 100%;
						}
					}
				}
			}
		}
	}

	@for $w from 0 through 60 {
		$v: $w * 5;

		&#{$v}px,
		&-#{$v}px {
			width: #{$v * 1px};

			&-min {
				min-width: #{$v * 1px};
			}

			&-max {
				max-width: #{$v * 1px};
			}

			@for $p from 0 through 5 {
				&-#{$p} {
					width: #{($v - $p) * 1px};
					margin-left: #{$p * 1px};
					margin-right: #{$p * 1px};

					@include mix.responsive() {
						&:not(.ignore-breakpoint) {
							width: 100%;
						}
					}
				}
			}
		}
	}

	&-full,
	&100,
	&-100 {
		width: 100%;

		&-min {
			min-width: 100%;
		}

		&-max {
			max-width: 100%;
		}
	}

	&-auto {
		width: auto !important;
	}
}

.\!{
	&w {
		@for $w from 0 through 19 {
			$v: $w * 5;

			&#{$v},
			&-#{$v} {
				width: #{$v * 1%}!important;

				&-min {
					min-width: #{$v * 1%}!important;
				}

				&-max {
					max-width: #{$v * 1%}!important;
				}

				@for $p from 0 through 5 {
					&-#{$p} {
						width: #{($v - $p - $p) * 1%}!important;
						margin-left: #{$p * 1%}!important;
						margin-right: #{$p * 1%}!important;

						@include mix.responsive() {
							&:not(.ignore-breakpoint) {
								width: 100%!important;
							}
						}
					}
				}
			}
		}

		&1\/3,
		&-33 {
			width: 33%!important;

			@for $p from 0 through 5 {
				&-#{$p} {
					width: #{(33 - $p - $p) * 1%}!important;
					margin-left: #{$p * 1%}!important;
					margin-right: #{$p * 1%}!important;

					@include mix.responsive() {
						&:not(.ignore-breakpoint) {
							width: 100%!important;
						}
					}
				}
			}

			&-min {
				min-width: 33%!important;
			}

			&-max {
				max-width: 33%!important;
			}
		}

		&2\/3,
		&-66 {
			width: 66%!important;

			@for $p from 0 through 5 {
				&-#{$p} {
					width: #{(66 - $p - $p) * 1%}!important;
					margin-left: #{$p * 1%}!important;
					margin-right: #{$p * 1%}!important;

					@include mix.responsive() {
						&:not(.ignore-breakpoint) {
							width: 100%!important;
						}
					}
				}
			}

			&-min {
				min-width: 66%;
			}

			&-max {
				max-width: 66%;
			}
		}

		@for $w from 0 through 20 {
			&#{$w}r,
			&-#{$w}r {
				width: #{$w * 1rem}!important;

				&-min {
					min-width: #{$w * 1rem}!important;
				}

				&-max {
					max-width: #{$w * 1rem}!important;
				}

				@for $p from 0 through 5 {
					&-#{$p} {
						width: #{($w - $p) * 1rem}!important;
						margin-left: #{$p * 1rem}!important;
						margin-right: #{$p * 1rem}!important;

						@include mix.responsive() {
							&:not(.ignore-breakpoint) {
								width: 100%!important;
							}
						}
					}
				}
			}
		}

		@for $w from 0 through 20 {
			&#{$w}em,
			&-#{$w}em {
				width: #{$w * 1em}!important;

				&-min {
					min-width: #{$w * 1em}!important;
				}

				&-max {
					max-width: #{$w * 1em}!important;
				}

				@for $p from 0 through 5 {
					&-#{$p} {
						width: #{($w - $p) * 1em}!important;
						margin-left: #{$p * 1em}!important;
						margin-right: #{$p * 1em}!important;

						@include mix.responsive() {
							&:not(.ignore-breakpoint) {
								width: 100%!important;
							}
						}
					}
				}
			}
		}

		@for $w from 0 through 60 {
			$v: $w * 5;

			&#{$v}px,
			&-#{$v}px {
				width: #{$v * 1px}!important;

				&-min {
					min-width: #{$v * 1px}!important;
				}

				&-max {
					max-width: #{$v * 1px}!important;
				}

				@for $p from 0 through 5 {
					&-#{$p} {
						width: #{($v - $p) * 1px}!important;
						margin-left: #{$p * 1px}!important;
						margin-right: #{$p * 1px}!important;

						@include mix.responsive() {
							&:not(.ignore-breakpoint) {
								width: 100%!important;
							}
						}
					}
				}
			}
		}

		&-full,
		&100,
		&-100 {
			width: 100%!important;

			&-min {
				min-width: 100%!important;
			}

			&-max {
				max-width: 100%!important;
			}
		}

		&-auto {
			width: auto !important;
		}
	}
}

@include mix.responsive() {
	.mob\:w {
		@for $w from 0 through 19 {
			$v: $w * 5;

			&#{$v},
			&-#{$v} {
				width: #{$v * 1%};

				&-min {
					min-width: #{$v * 1%};
				}

				&-max {
					max-width: #{$v * 1%};
				}

				@for $p from 0 through 5 {
					&-#{$p} {
						width: #{($v - $p - $p) * 1%};
						margin-left: #{$p * 1%};
						margin-right: #{$p * 1%};

						@include mix.responsive() {
							&:not(.ignore-breakpoint) {
								width: 100%;
							}
						}
					}
				}
			}
		}

		&1\/3,
		&-33 {
			width: 33%;

			&-min {
				min-width: 33%;
			}

			&-max {
				max-width: 33%;
			}
		}

		&2\/3,
		&-66 {
			width: 66%;

			&-min {
				min-width: 66%;
			}

			&-max {
				max-width: 66%;
			}
		}

		@for $w from 0 through 20 {

			&#{$w}r,
			&-#{$w}r {
				width: #{$w * 1rem};

				&-min {
					min-width: #{$w * 1rem};
				}

				&-max {
					max-width: #{$w * 1rem};
				}

				@for $p from 0 through 5 {
					&-#{$p} {
						width: #{($w - $p) * 1rem};
						margin-left: #{$p * 1rem};
						margin-right: #{$p * 1rem};

						@include mix.responsive() {
							&:not(.ignore-breakpoint) {
								width: 100%;
							}
						}
					}
				}
			}
		}

		@for $w from 0 through 20 {

			&#{$w}em,
			&-#{$w}em {
				width: #{$w * 1em};

				&-min {
					min-width: #{$w * 1em};
				}

				&-max {
					max-width: #{$w * 1em};
				}

				@for $p from 0 through 5 {
					&-#{$p} {
						width: #{($w - $p) * 1em};
						margin-left: #{$p * 1em};
						margin-right: #{$p * 1em};

						@include mix.responsive() {
							&:not(.ignore-breakpoint) {
								width: 100%;
							}
						}
					}
				}
			}
		}

		@for $w from 0 through 60 {
			$v: $w * 5;

			&#{$v}px,
			&-#{$v}px {
				width: #{$v * 1px};

				&-min {
					min-width: #{$v * 1px};
				}

				&-max {
					max-width: #{$v * 1px};
				}

				@for $p from 0 through 5 {
					&-#{$p} {
						width: #{($v - $p) * 1px};
						margin-left: #{$p * 1px};
						margin-right: #{$p * 1px};

						@include mix.responsive() {
							&:not(.ignore-breakpoint) {
								width: 100%;
							}
						}
					}
				}
			}
		}

		&-full,
		&100,
		&-100 {
			width: 100%;
		}

		&-auto {
			width: auto !important;
		}
	}

	.mob\:\!{
		&w {
			@for $w from 0 through 19 {
				$v: $w * 5;

				&#{$v},
				&-#{$v} {
					width: #{$v * 1%}!important;

					&-min {
						min-width: #{$v * 1%}!important;
					}

					&-max {
						max-width: #{$v * 1%}!important;
					}

					@for $p from 0 through 5 {
						&-#{$p} {
							width: #{($v - $p - $p) * 1%}!important;
							margin-left: #{$p * 1%}!important;
							margin-right: #{$p * 1%}!important;

							@include mix.responsive() {
								&:not(.ignore-breakpoint) {
									width: 100%!important;
								}
							}
						}
					}
				}
			}

			&1\/3,
			&-33 {
				width: 33%!important;

				@for $p from 0 through 5 {
					&-#{$p} {
						width: #{(33 - $p - $p) * 1%}!important;
						margin-left: #{$p * 1%}!important;
						margin-right: #{$p * 1%}!important;

						@include mix.responsive() {
							&:not(.ignore-breakpoint) {
								width: 100%!important;
							}
						}
					}
				}

				&-min {
					min-width: 33%!important;
				}

				&-max {
					max-width: 33%!important;
				}
			}

			&2\/3,
			&-66 {
				width: 66%!important;

				@for $p from 0 through 5 {
					&-#{$p} {
						width: #{(66 - $p - $p) * 1%}!important;
						margin-left: #{$p * 1%}!important;
						margin-right: #{$p * 1%}!important;

						@include mix.responsive() {
							&:not(.ignore-breakpoint) {
								width: 100%!important;
							}
						}
					}
				}

				&-min {
					min-width: 66%;
				}

				&-max {
					max-width: 66%;
				}
			}

			@for $w from 0 through 20 {
				&#{$w}r,
				&-#{$w}r {
					width: #{$w * 1rem}!important;

					&-min {
						min-width: #{$w * 1rem}!important;
					}

					&-max {
						max-width: #{$w * 1rem}!important;
					}

					@for $p from 0 through 5 {
						&-#{$p} {
							width: #{($w - $p) * 1rem}!important;
							margin-left: #{$p * 1rem}!important;
							margin-right: #{$p * 1rem}!important;

							@include mix.responsive() {
								&:not(.ignore-breakpoint) {
									width: 100%!important;
								}
							}
						}
					}
				}
			}

			@for $w from 0 through 20 {
				&#{$w}em,
				&-#{$w}em {
					width: #{$w * 1em}!important;

					&-min {
						min-width: #{$w * 1em}!important;
					}

					&-max {
						max-width: #{$w * 1em}!important;
					}

					@for $p from 0 through 5 {
						&-#{$p} {
							width: #{($w - $p) * 1em}!important;
							margin-left: #{$p * 1em}!important;
							margin-right: #{$p * 1em}!important;

							@include mix.responsive() {
								&:not(.ignore-breakpoint) {
									width: 100%!important;
								}
							}
						}
					}
				}
			}

			@for $w from 0 through 60 {
				$v: $w * 5;

				&#{$v}px,
				&-#{$v}px {
					width: #{$v * 1px}!important;

					&-min {
						min-width: #{$v * 1px}!important;
					}

					&-max {
						max-width: #{$v * 1px}!important;
					}

					@for $p from 0 through 5 {
						&-#{$p} {
							width: #{($v - $p) * 1px}!important;
							margin-left: #{$p * 1px}!important;
							margin-right: #{$p * 1px}!important;

							@include mix.responsive() {
								&:not(.ignore-breakpoint) {
									width: 100%!important;
								}
							}
						}
					}
				}
			}

			&-full,
			&100,
			&-100 {
				width: 100%!important;

				&-min {
					min-width: 100%!important;
				}

				&-max {
					max-width: 100%!important;
				}
			}

			&-auto {
				width: auto !important;
			}
		}
	}
}

.h {
	@for $h from 0 through 19 {
		$v: $h * 5;

		&#{$h},
		&-#{$v} {
			height: #{$v * 1%};

			&-min {
				min-height: #{$v * 1%};
			}

			&-max {
				max-height: #{$v * 1%};
			}

			@for $p from 0 through 5 {
				&-#{$p} {
					height: #{($v - $p - $p) * 1%};
					margin-top: #{$p * 1%};
					margin-bottom: #{$p * 1%};
				}
			}
		}
	}

	@for $h from 0 through 20 {

		&#{$h}r,
		&-#{$h}r {
			height: #{$h * 1rem};

			&-min {
				min-height: #{$h * 1rem};
			}

			&-max {
				max-height: #{$h * 1rem};
			}

			@for $p from 0 through 5 {
				&-#{$p} {
					height: #{($h - $p) * 1rem};
					margin-top: #{$p * 1rem};
					margin-bottom: #{$p * 1rem};
				}
			}
		}
	}

	@for $h from 0 through 20 {

		&#{$h}em,
		&-#{$h}em {
			height: #{$h * 1em};

			&-min {
				min-height: #{$h * 1em};
			}

			&-max {
				max-height: #{$h * 1em};
			}

			@for $p from 0 through 5 {
				&-#{$p} {
					height: #{($h - $p) * 1em};
					margin-top: #{$p * 1em};
					margin-bottom: #{$p * 1em};
				}
			}
		}
	}

	@for $h from 0 through 60 {
		$v: $h * 5;

		&#{$v}px,
		&-#{$v}px {
			height: #{$v * 1px};

			&-min {
				min-height: #{$v * 1px};
			}

			&-max {
				max-height: #{$v * 1px};
			}

			@for $p from 0 through 5 {
				&-#{$p} {
					height: #{($v - $p) * 1px};
					margin-top: #{$p * 1px};
					margin-bottom: #{$p * 1px};
				}
			}
		}
	}

	&-full,
	&100,
	&-100 {
		height: 100%;
	}

	&-auto {
		height: auto;
	}
}

.\!{
	.h {
		@for $h from 0 through 19 {
			$v: $h * 5;

			&#{$h},
			&-#{$v} {
				height: #{$v * 1%}!important;

				&-min {
					min-height: #{$v * 1%}!important;
				}

				&-max {
					max-height: #{$v * 1%}!important;
				}

				@for $p from 0 through 5 {
					&-#{$p} {
						height: #{($v - $p - $p) * 1%}!important;
						margin-top: #{$p * 1%}!important;
						margin-bottom: #{$p * 1%}!important;
					}
				}
			}
		}

		@for $h from 0 through 20 {

			&#{$h}r,
			&-#{$h}r {
				height: #{$h * 1rem}!important;

				&-min {
					min-height: #{$h * 1rem}!important;
				}

				&-max {
					max-height: #{$h * 1rem}!important;
				}

				@for $p from 0 through 5 {
					&-#{$p} {
						height: #{($h - $p) * 1rem}!important;
						margin-top: #{$p * 1rem}!important;
						margin-bottom: #{$p * 1rem}!important;
					}
				}
			}
		}

		@for $h from 0 through 20 {

			&#{$h}em,
			&-#{$h}em {
				height: #{$h * 1em}!important;

				&-min {
					min-height: #{$h * 1em}!important;
				}

				&-max {
					max-height: #{$h * 1em}!important;
				}

				@for $p from 0 through 5 {
					&-#{$p} {
						height: #{($h - $p) * 1em}!important;
						margin-top: #{$p * 1em}!important;
						margin-bottom: #{$p * 1em}!important;
					}
				}
			}
		}

		@for $h from 0 through 60 {
			$v: $h * 5;

			&#{$v}px,
			&-#{$v}px {
				height: #{$v * 1px}!important;

				&-min {
					min-height: #{$v * 1px}!important;
				}

				&-max {
					max-height: #{$v * 1px}!important;
				}

				@for $p from 0 through 5 {
					&-#{$p} {
						height: #{($v - $p) * 1px}!important;
						margin-top: #{$p * 1px}!important;
						margin-bottom: #{$p * 1px}!important;
					}
				}
			}
		}

		&-full,
		&100,
		&-100 {
			height: 100%!important;
		}

		&-auto {
			height: auto!important;
		}
	}
}

@include mix.responsive() {
	.mob\:h {
		@for $h from 0 through 18 {
			$v: $h * 5;

			&#{$h},
			&-#{$v} {
				height: #{$v * 1%};

				&-min {
					min-height: #{$v * 1%};
				}

				&-max {
					max-height: #{$v * 1%};
				}

				@for $p from 0 through 5 {
					&-#{$p} {
						height: #{($v - $p - $p) * 1%};
						margin-top: #{$p * 1%};
						margin-bottom: #{$p * 1%};
					}
				}
			}
		}

		@for $h from 0 through 20 {

			&#{$h}r,
			&-#{$h}r {
				height: #{$h * 1rem};

				&-min {
					min-height: #{$h * 1rem};
				}

				&-max {
					max-height: #{$h * 1rem};
				}

				@for $p from 0 through 5 {
					&-#{$p} {
						height: #{($h - $p) * 1rem};
						margin-top: #{$p * 1rem};
						margin-bottom: #{$p * 1rem};
					}
				}
			}
		}

		@for $h from 0 through 20 {

			&#{$h}em,
			&-#{$h}em {
				height: #{$h * 1em};

				&-min {
					min-height: #{$h * 1em};
				}

				&-max {
					max-height: #{$h * 1em};
				}

				@for $p from 0 through 5 {
					&-#{$p} {
						height: #{($h - $p) * 1em};
						margin-top: #{$p * 1em};
						margin-bottom: #{$p * 1em};
					}
				}
			}
		}

		@for $h from 0 through 60 {
			$v: $h * 5;

			&#{$v}px,
			&-#{$v}px {
				height: #{$v * 1px};

				&-min {
					min-height: #{$v * 1px};
				}

				&-max {
					max-height: #{$v * 1px};
				}

				@for $p from 0 through 5 {
					&-#{$p} {
						height: #{($v - $p) * 1px};
						margin-top: #{$p * 1px};
						margin-bottom: #{$p * 1px};
					}
				}
			}
		}

		&-full,
		&100,
		&-100 {
			height: 100%;
		}

		&-auto {
			height: auto;
		}
	}

	.mob\:\!{
		.h {
			@for $h from 0 through 19 {
				$v: $h * 5;

				&#{$h},
				&-#{$v} {
					height: #{$v * 1%}!important;

					&-min {
						min-height: #{$v * 1%}!important;
					}

					&-max {
						max-height: #{$v * 1%}!important;
					}

					@for $p from 0 through 5 {
						&-#{$p} {
							height: #{($v - $p - $p) * 1%}!important;
							margin-top: #{$p * 1%}!important;
							margin-bottom: #{$p * 1%}!important;
						}
					}
				}
			}

			@for $h from 0 through 20 {

				&#{$h}r,
				&-#{$h}r {
					height: #{$h * 1rem}!important;

					&-min {
						min-height: #{$h * 1rem}!important;
					}

					&-max {
						max-height: #{$h * 1rem}!important;
					}

					@for $p from 0 through 5 {
						&-#{$p} {
							height: #{($h - $p) * 1rem}!important;
							margin-top: #{$p * 1rem}!important;
							margin-bottom: #{$p * 1rem}!important;
						}
					}
				}
			}

			@for $h from 0 through 20 {

				&#{$h}em,
				&-#{$h}em {
					height: #{$h * 1em}!important;

					&-min {
						min-height: #{$h * 1em}!important;
					}

					&-max {
						max-height: #{$h * 1em}!important;
					}

					@for $p from 0 through 5 {
						&-#{$p} {
							height: #{($h - $p) * 1em}!important;
							margin-top: #{$p * 1em}!important;
							margin-bottom: #{$p * 1em}!important;
						}
					}
				}
			}

			@for $h from 0 through 60 {
				$v: $h * 5;

				&#{$v}px,
				&-#{$v}px {
					height: #{$v * 1px}!important;

					&-min {
						min-height: #{$v * 1px}!important;
					}

					&-max {
						max-height: #{$v * 1px}!important;
					}

					@for $p from 0 through 5 {
						&-#{$p} {
							height: #{($v - $p) * 1px}!important;
							margin-top: #{$p * 1px}!important;
							margin-bottom: #{$p * 1px}!important;
						}
					}
				}
			}

			&-full,
			&100,
			&-100 {
				height: 100%!important;
			}

			&-auto {
				height: auto!important;
			}
		}
	}
}

//* Bordas: [https://webeponto.notion.site/Bordas-a181d070d03245a3b511d34647301fb6]
$borders: dashed, dotted, double, groove, hidden, inset, none, outset, ridge, solid, wavy;

.b {
	@for $b from 0 through 10 {
		&#{$b}px,
		&-#{$b}px {
			border-width: #{$b * 1px};

			@each $border in $borders {
				&-#{$border} {
					border-width: #{$b * 1px};
					border-style: $border;
				}
			}
		}

		&y#{$b}px,
		&y-#{$b}px {
			border-top-width: #{$b * 1px};
			border-bottom-width: #{$b * 1px};

			@each $border in $borders {
				&-#{$border} {
					border-top-width: #{$b * 1px};
					border-bottom-width: #{$b * 1px};
					border-style: $border;
				}
			}
		}

		&x#{$b}px,
		&x-#{$b}px {
			border-left-width: #{$b * 1px};
			border-right-width: #{$b * 1px};

			@each $border in $borders {
				&-#{$border} {
					border-left-width: #{$b * 1px};
					border-right-width: #{$b * 1px};
					border-style: $border;
				}
			}
		}

		&t#{$b}px,
		&t-#{$b}px {
			border-top-width: #{$b * 1px};

			@each $border in $borders {
				&-#{$border} {
					border-top-width: #{$b * 1px};
					border-style: $border;
				}
			}
		}

		&r#{$b}px,
		&r-#{$b}px {
			border-right-width: #{$b * 1px};

			@each $border in $borders {
				&-#{$border} {
					border-right-width: #{$b * 1px};
					border-style: $border;
				}
			}
		}

		&b#{$b}px,
		&b-#{$b}px {
			border-bottom-width: #{$b * 1px};

			@each $border in $borders {
				&-#{$border} {
					border-bottom-width: #{$b * 1px};
					border-style: $border;
				}
			}
		}

		&l#{$b}px,
		&l-#{$b}px {
			border-left-width: #{$b * 1px};

			@each $border in $borders {
				&-#{$border} {
					border-left-width: #{$b * 1px};
					border-style: $border;
				}
			}
		}

		// Divisores:
		&div-{
			&y#{$b}px,
			&y-#{$b}px {
				& > *:not(:first-child){
					border-top-width: #{$b * 1px};
				}
				
				& > *:not(:last-child){
					border-bottom-width: #{$b * 1px};
				}

				& > *:not(:first-child),
				& > *:not(:last-child){
					border-top-width: #{$b * 1px};
					border-bottom-width: #{$b * 1px};
				}

				@each $border in $borders {
					&-#{$border} {
						& > *{
							border-style: $border;
						}
						
						& > *:not(:first-child){
							border-top-width: #{$b * 1px};
						}
						
						& > *:not(:last-child){
							border-bottom-width: #{$b * 1px};
						}

						& > *:not(:first-child),
						& > *:not(:last-child){
							border-top-width: #{$b * 1px};
							border-bottom-width: #{$b * 1px};
						}
					}
				}
			}
			
			&x#{$b}px,
			&x-#{$b}px {
				& > *:not(:first-child){
					border-right-width: #{$b * 1px};
				}
				
				& > *:not(:last-child){
					border-left-width: #{$b * 1px};
				}

				& > *:not(:first-child),
				& > *:not(:last-child){
					border-right-width: #{$b * 1px};
					border-left-width: #{$b * 1px};
				}

				@each $border in $borders {
					&-#{$border} {
						& > *{
							border-style: $border;
						}
						
						& > *:not(:first-child){
							border-right-width: #{$b * 1px};
						}
						
						& > *:not(:last-child){
							border-left-width: #{$b * 1px};
						}

						& > *:not(:first-child),
						& > *:not(:last-child){
							border-right-width: #{$b * 1px};
							border-left-width: #{$b * 1px};
						}
					}
				}
			}
		}
	}
}

@include mix.responsive() {

	.mob\:border,
	.mob\:b {
		@for $b from 0 through 10 {

			&#{$b}px,
			&-#{$b}px {
				border-width: #{$b * 1px};

				@each $border in $borders {
					&-#{$border} {
						border-width: #{$b * 1px};
						border-style: $border;
					}
				}
			}

			&y#{$b}px,
			&y-#{$b}px {
				border-top-width: #{$b * 1px};
				border-bottom-width: #{$b * 1px};

				@each $border in $borders {
					&-#{$border} {
						border-top-width: #{$b * 1px};
						border-bottom-width: #{$b * 1px};
						border-style: $border;
					}
				}
			}

			&x#{$b}px,
			&x-#{$b}px {
				border-left-width: #{$b * 1px};
				border-right-width: #{$b * 1px};

				@each $border in $borders {
					&-#{$border} {
						border-left-width: #{$b * 1px};
						border-right-width: #{$b * 1px};
						border-style: $border;
					}
				}
			}

			&t#{$b}px,
			&t-#{$b}px {
				border-top-width: #{$b * 1px};

				@each $border in $borders {
					&-#{$border} {
						border-top-width: #{$b * 1px};
						border-style: $border;
					}
				}
			}

			&r#{$b}px,
			&r-#{$b}px {
				border-right-width: #{$b * 1px};

				@each $border in $borders {
					&-#{$border} {
						border-right-width: #{$b * 1px};
						border-style: $border;
					}
				}
			}

			&b#{$b}px,
			&b-#{$b}px {
				border-bottom-width: #{$b * 1px};

				@each $border in $borders {
					&-#{$border} {
						border-bottom-width: #{$b * 1px};
						border-style: $border;
					}
				}
			}

			&l#{$b}px,
			&l-#{$b}px {
				border-left-width: #{$b * 1px};

				@each $border in $borders {
					&-#{$border} {
						border-left-width: #{$b * 1px};
						border-style: $border;
					}
				}
			}
		}
	}
}

//* Raio de Borda: [https://webeponto.notion.site/Raio-de-Borda-bfd74a08896b46a0b34970e3427980da]
.rounded {
	@for $r from 0 through 100 {

		&#{$r},
		&-#{$r} {
			border-radius: #{$r * 1%};
		}
	}

	@for $r from 0 through 200 {

		&#{$r}px,
		&-#{$r}px {
			border-radius: #{$r * 1px};
		}
	}

	@for $r from 0 through 10 {

		&#{$r}r,
		&-#{$r}r {
			border-radius: #{$r * 1rem};
		}
	}

	@for $r from 0 through 10 {

		&#{$r}em,
		&-#{$r}em {
			border-radius: #{$r * 1em};
		}
	}

	&-t {
		@for $r from 0 through 100 {

			&#{$r},
			&-#{$r} {
				border-top-left-radius: #{$r * 1%};
				border-top-right-radius: #{$r * 1%};
			}
		}

		@for $r from 0 through 100 {

			&#{$r}px,
			&-#{$r}px {
				border-top-left-radius: #{$r * 1px};
				border-top-right-radius: #{$r * 1px};
			}
		}

		@for $r from 0 through 10 {

			&#{$r}r,
			&-#{$r}r {
				border-top-left-radius: #{$r * 1rem};
				border-top-right-radius: #{$r * 1rem};
			}
		}

		@for $r from 0 through 10 {

			&#{$r}em,
			&-#{$r}em {
				border-top-left-radius: #{$r * 1em};
				border-top-right-radius: #{$r * 1em};
			}
		}
	}

	&-b {
		@for $r from 0 through 100 {

			&#{$r},
			&-#{$r} {
				border-bottom-left-radius: #{$r * 1%};
				border-bottom-right-radius: #{$r * 1%};
			}
		}

		@for $r from 0 through 100 {

			&#{$r}px,
			&-#{$r}px {
				border-bottom-left-radius: #{$r * 1px};
				border-bottom-right-radius: #{$r * 1px};
			}
		}

		@for $r from 0 through 10 {

			&#{$r}r,
			&-#{$r}r {
				border-bottom-left-radius: #{$r * 1rem};
				border-bottom-right-radius: #{$r * 1rem};
			}
		}

		@for $r from 0 through 10 {

			&#{$r}em,
			&-#{$r}em {
				border-bottom-left-radius: #{$r * 1em};
				border-bottom-right-radius: #{$r * 1em};
			}
		}
	}

	&-l {
		@for $r from 0 through 100 {

			&#{$r},
			&-#{$r} {
				border-top-left-radius: #{$r * 1%};
				border-bottom-left-radius: #{$r * 1%};
			}
		}

		@for $r from 0 through 100 {

			&#{$r}px,
			&-#{$r}px {
				border-top-left-radius: #{$r * 1px};
				border-bottom-left-radius: #{$r * 1px};
			}
		}

		@for $r from 0 through 10 {

			&#{$r}r,
			&-#{$r}r {
				border-top-left-radius: #{$r * 1rem};
				border-bottom-left-radius: #{$r * 1rem};
			}
		}

		@for $r from 0 through 10 {

			&#{$r}em,
			&-#{$r}em {
				border-top-left-radius: #{$r * 1em};
				border-bottom-left-radius: #{$r * 1em};
			}
		}
	}

	&-r {
		@for $r from 0 through 100 {

			&#{$r},
			&-#{$r} {
				border-top-right-radius: #{$r * 1%};
				border-bottom-right-radius: #{$r * 1%};
			}
		}

		@for $r from 0 through 100 {

			&#{$r}px,
			&-#{$r}px {
				border-top-right-radius: #{$r * 1px};
				border-bottom-right-radius: #{$r * 1px};
			}
		}

		@for $r from 0 through 10 {

			&#{$r}r,
			&-#{$r}r {
				border-top-right-radius: #{$r * 1rem};
				border-bottom-right-radius: #{$r * 1rem};
			}
		}

		@for $r from 0 through 10 {

			&#{$r}em,
			&-#{$r}em {
				border-top-right-radius: #{$r * 1em};
				border-bottom-right-radius: #{$r * 1em};
			}
		}
	}

	&-tl {
		@for $r from 0 through 100 {

			&#{$r},
			&-#{$r} {
				border-top-left-radius: #{$r * 1%};
			}
		}

		@for $r from 0 through 100 {

			&#{$r}px,
			&-#{$r}px {
				border-top-left-radius: #{$r * 1px};
			}
		}

		@for $r from 0 through 10 {

			&#{$r}r,
			&-#{$r}r {
				border-top-left-radius: #{$r * 1rem};
			}
		}

		@for $r from 0 through 10 {

			&#{$r}em,
			&-#{$r}em {
				border-top-left-radius: #{$r * 1em};
			}
		}
	}

	&-tr {
		@for $r from 0 through 100 {

			&#{$r},
			&-#{$r} {
				border-top-right-radius: #{$r * 1%};
			}
		}

		@for $r from 0 through 100 {

			&#{$r}px,
			&-#{$r}px {
				border-top-right-radius: #{$r * 1px};
			}
		}

		@for $r from 0 through 10 {

			&#{$r}r,
			&-#{$r}r {
				border-top-right-radius: #{$r * 1rem};
			}
		}

		@for $r from 0 through 10 {

			&#{$r}em,
			&-#{$r}em {
				border-top-right-radius: #{$r * 1em};
			}
		}
	}

	&-bl {
		@for $r from 0 through 100 {

			&#{$r},
			&-#{$r} {
				border-bottom-left-radius: #{$r * 1%};
			}
		}

		@for $r from 0 through 100 {

			&#{$r}px,
			&-#{$r}px {
				border-bottom-left-radius: #{$r * 1px};
			}
		}

		@for $r from 0 through 10 {

			&#{$r}r,
			&-#{$r}r {
				border-bottom-left-radius: #{$r * 1rem};
			}
		}

		@for $r from 0 through 10 {

			&#{$r}em,
			&-#{$r}em {
				border-bottom-left-radius: #{$r * 1em};
			}
		}
	}

	&-br {
		@for $r from 0 through 100 {

			&#{$r},
			&-#{$r} {
				border-bottom-right-radius: #{$r * 1%};
			}
		}

		@for $r from 0 through 100 {

			&#{$r}px,
			&-#{$r}px {
				border-bottom-right-radius: #{$r * 1px};
			}
		}

		@for $r from 0 through 10 {

			&#{$r}r,
			&-#{$r}r {
				border-bottom-right-radius: #{$r * 1rem};
			}
		}

		@for $r from 0 through 10 {

			&#{$r}em,
			&-#{$r}em {
				border-bottom-right-radius: #{$r * 1em};
			}
		}
	}
}

@include mix.responsive() {
	.mob\:rounded {
		@for $r from 0 through 100 {

			&#{$r},
			&-#{$r} {
				border-radius: #{$r * 1%};
			}
		}

		@for $r from 0 through 100 {

			&#{$r}px,
			&-#{$r}px {
				border-radius: #{$r * 1px};
			}
		}

		@for $r from 0 through 10 {

			&#{$r}r,
			&-#{$r}r {
				border-radius: #{$r * 1rem};
			}
		}

		@for $r from 0 through 10 {

			&#{$r}em,
			&-#{$r}em {
				border-radius: #{$r * 1em};
			}
		}

		&-t {
			@for $r from 0 through 100 {

				&#{$r},
				&-#{$r} {
					border-top-left-radius: #{$r * 1%};
					border-top-right-radius: #{$r * 1%};
				}
			}

			@for $r from 0 through 100 {

				&#{$r}px,
				&-#{$r}px {
					border-top-left-radius: #{$r * 1px};
					border-top-right-radius: #{$r * 1px};
				}
			}

			@for $r from 0 through 10 {

				&#{$r}r,
				&-#{$r}r {
					border-top-left-radius: #{$r * 1rem};
					border-top-right-radius: #{$r * 1rem};
				}
			}

			@for $r from 0 through 10 {

				&#{$r}em,
				&-#{$r}em {
					border-top-left-radius: #{$r * 1em};
					border-top-right-radius: #{$r * 1em};
				}
			}
		}

		&-b {
			@for $r from 0 through 100 {

				&#{$r},
				&-#{$r} {
					border-bottom-left-radius: #{$r * 1%};
					border-bottom-right-radius: #{$r * 1%};
				}
			}

			@for $r from 0 through 100 {

				&#{$r}px,
				&-#{$r}px {
					border-bottom-left-radius: #{$r * 1px};
					border-bottom-right-radius: #{$r * 1px};
				}
			}

			@for $r from 0 through 10 {

				&#{$r}r,
				&-#{$r}r {
					border-bottom-left-radius: #{$r * 1rem};
					border-bottom-right-radius: #{$r * 1rem};
				}
			}

			@for $r from 0 through 10 {

				&#{$r}em,
				&-#{$r}em {
					border-bottom-left-radius: #{$r * 1em};
					border-bottom-right-radius: #{$r * 1em};
				}
			}
		}

		&-l {
			@for $r from 0 through 100 {

				&#{$r},
				&-#{$r} {
					border-top-left-radius: #{$r * 1%};
					border-bottom-left-radius: #{$r * 1%};
				}
			}

			@for $r from 0 through 100 {

				&#{$r}px,
				&-#{$r}px {
					border-top-left-radius: #{$r * 1px};
					border-bottom-left-radius: #{$r * 1px};
				}
			}

			@for $r from 0 through 10 {

				&#{$r}r,
				&-#{$r}r {
					border-top-left-radius: #{$r * 1rem};
					border-bottom-left-radius: #{$r * 1rem};
				}
			}

			@for $r from 0 through 10 {

				&#{$r}em,
				&-#{$r}em {
					border-top-left-radius: #{$r * 1em};
					border-bottom-left-radius: #{$r * 1em};
				}
			}
		}

		&-r {
			@for $r from 0 through 100 {

				&#{$r},
				&-#{$r} {
					border-top-right-radius: #{$r * 1%};
					border-bottom-right-radius: #{$r * 1%};
				}
			}

			@for $r from 0 through 100 {

				&#{$r}px,
				&-#{$r}px {
					border-top-right-radius: #{$r * 1px};
					border-bottom-right-radius: #{$r * 1px};
				}
			}

			@for $r from 0 through 10 {

				&#{$r}r,
				&-#{$r}r {
					border-top-right-radius: #{$r * 1rem};
					border-bottom-right-radius: #{$r * 1rem};
				}
			}

			@for $r from 0 through 10 {

				&#{$r}em,
				&-#{$r}em {
					border-top-right-radius: #{$r * 1em};
					border-bottom-right-radius: #{$r * 1em};
				}
			}
		}

		&-tl {
			@for $r from 0 through 100 {

				&#{$r},
				&-#{$r} {
					border-top-left-radius: #{$r * 1%};
				}
			}

			@for $r from 0 through 100 {

				&#{$r}px,
				&-#{$r}px {
					border-top-left-radius: #{$r * 1px};
				}
			}

			@for $r from 0 through 10 {

				&#{$r}r,
				&-#{$r}r {
					border-top-left-radius: #{$r * 1rem};
				}
			}

			@for $r from 0 through 10 {

				&#{$r}em,
				&-#{$r}em {
					border-top-left-radius: #{$r * 1em};
				}
			}
		}

		&-tr {
			@for $r from 0 through 100 {

				&#{$r},
				&-#{$r} {
					border-top-right-radius: #{$r * 1%};
				}
			}

			@for $r from 0 through 100 {

				&#{$r}px,
				&-#{$r}px {
					border-top-right-radius: #{$r * 1px};
				}
			}

			@for $r from 0 through 10 {

				&#{$r}r,
				&-#{$r}r {
					border-top-right-radius: #{$r * 1rem};
				}
			}

			@for $r from 0 through 10 {

				&#{$r}em,
				&-#{$r}em {
					border-top-right-radius: #{$r * 1em};
				}
			}
		}

		&-bl {
			@for $r from 0 through 100 {

				&#{$r},
				&-#{$r} {
					border-bottom-left-radius: #{$r * 1%};
				}
			}

			@for $r from 0 through 100 {

				&#{$r}px,
				&-#{$r}px {
					border-bottom-left-radius: #{$r * 1px};
				}
			}

			@for $r from 0 through 10 {

				&#{$r}r,
				&-#{$r}r {
					border-bottom-left-radius: #{$r * 1rem};
				}
			}

			@for $r from 0 through 10 {

				&#{$r}em,
				&-#{$r}em {
					border-bottom-left-radius: #{$r * 1em};
				}
			}
		}

		&-br {
			@for $r from 0 through 100 {

				&#{$r},
				&-#{$r} {
					border-bottom-right-radius: #{$r * 1%};
				}
			}

			@for $r from 0 through 100 {

				&#{$r}px,
				&-#{$r}px {
					border-bottom-right-radius: #{$r * 1px};
				}
			}

			@for $r from 0 through 10 {

				&#{$r}r,
				&-#{$r}r {
					border-bottom-right-radius: #{$r * 1rem};
				}
			}

			@for $r from 0 through 10 {

				&#{$r}em,
				&-#{$r}em {
					border-bottom-right-radius: #{$r * 1em};
				}
			}
		}
	}
}

//* Outlines:
$outlines: dashed, dotted, double, groove, hidden, inset, none, outset, ridge, solid;
.o{
	@for $o from 0 through 10 {

		&#{$o}px,
		&-#{$o}px {
			outline: #{$o * 1px};

			@each $outline in $outlines {
				&-#{$outline} {
					outline: #{$o * 1px};
					outline-style: $outline;
				}
			}
		}
	}
}

//* Caixas de Conteúdo:
.border-box {
	box-sizing: border-box;
}

.content-box {
	box-sizing: content-box;
}

.webkit-box {
	display: -webkit-box;
	overflow: hidden;
	text-overflow: ellipsis;

	&.v-oriented {
		-webkit-box-orient: vertical;
	}

	&.h-oriented {
		-webkit-box-orient: horizontal;
	}

	&.block-oriented {
		-webkit-box-orient: block-axis;
	}

	&.inline-oriented {
		-webkit-box-orient: inline-axis;
	}

	&.clamp {
		@for $c from 0 through 10 {
			&-#{$c} {
				-webkit-line-clamp: $c;
			}
		}
	}

	@include mix.responsive() {
		&.mob\:v-oriented {
			-webkit-box-orient: vertical;
		}

		&.mob\:h-oriented {
			-webkit-box-orient: horizontal;
		}

		&.mob\:block-oriented {
			-webkit-box-orient: block-axis;
		}

		&.mob\:inline-oriented {
			-webkit-box-orient: inline-axis;
		}

		&.mob\:clamp {
			@for $c from 0 through 10 {
				&-#{$c} {
					-webkit-line-clamp: $c;
				}
			}
		}
	}
}

@include mix.responsive() {
	.mob\:border-box {
		box-sizing: border-box;
	}

	.mob\:content-box {
		box-sizing: content-box;
	}

	.mob\:webkit-box {
		display: -webkit-box;
		overflow: hidden;
		text-overflow: ellipsis;

		&.mob\:v-oriented {
			-webkit-box-orient: vertical;
		}

		&.mob\:h-oriented {
			-webkit-box-orient: horizontal;
		}

		&.mob\:block-oriented {
			-webkit-box-orient: block-axis;
		}

		&.mob\:inline-oriented {
			-webkit-box-orient: inline-axis;
		}

		&.mob\:clamp {
			@for $c from 0 through 10 {
				&-#{$c} {
					-webkit-line-clamp: $c;
				}
			}
		}
	}
}

//* Vídeos e Imagens:
.iframe {
	&-16\/9 {
		aspect-ratio: 16 / 9;
		width: 100%;
	}

	&-4\/3 {
		aspect-ratio: 4 / 3;
		width: 100%;
	}
}

@include mix.responsive() {
	.mob\:iframe {
		&-16\/9 {
			aspect-ratio: 16 / 9;
			width: 100%;
		}

		&-4\/3 {
			aspect-ratio: 4 / 3;
			width: 100%;
		}
	}
}

img {
	max-width: 100%;

	&.fit {
		object-fit: fill;

		&-cover {
			object-fit: cover;

			&-top{
				object-fit: cover;
				object-position: top;
			}

			&-bottom{
                object-fit: cover;
                object-position: bottom;
            }

            &-left{
                object-fit: cover;
                object-position: left;
            }

            &-right{
                object-fit: cover;
                object-position: right;
            }

            &-center{
                object-fit: cover;
                object-position: center;
            }

            &-top-left{
                object-fit: cover;
                object-position: top left;
            }

            &-top-right{
                object-fit: cover;
                object-position: top right;
            }

            &-bottom-left{
                object-fit: cover;
                object-position: bottom left;
            }

            &-bottom-right{
                object-fit: cover;
				object-position: bottom right;
            }
		}

		&-contain {
			object-fit: contain;
		}

		&-scale-down {
			object-fit: scale-down;
		}
	}


}

//* Razão de Aspecto:
.ratio {
    &-16\/9 {
        aspect-ratio: 16 / 9;
    }

	&-4\/3 {
		aspect-ratio: 4 / 3;
	}

	&-2\/3 {
        aspect-ratio: 2 / 3;
    }

	&-1\/1 {
        aspect-ratio: 1 / 1;
    }
}

@include mix.responsive() {
	.mob\:ratio {
		&-16\/9 {
			aspect-ratio: 16 / 9;
		}

		&-4\/3 {
			aspect-ratio: 4 / 3;
		}

		&-2\/3 {
			aspect-ratio: 2 / 3;
		}

		&-1\/1 {
			aspect-ratio: 1 / 1;
		}
	}
}

//* Transições:
.transition {
	transition-property: color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter;
	transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
	transition-duration: 150ms;

	//? Tipos de transição:
	&-none {
		transition-property: none;
	}

	&-all {
		transition-property: all;
		transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
		transition-duration: 150ms;
	}

	&-colors {
		transition-property: color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter;
		transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
		transition-duration: 150ms;
	}

	&-opacity {
		transition-property: opacity;
		transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
		transition-duration: 150ms;
	}

	&-shadow {
		transition-property: box-shadow;
		transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
		transition-duration: 150ms;
	}

	&-transform {
		transition-property: transform;
		transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
		transition-duration: 150ms;
	}
}

// Durações e atrasos da transição
.duration {
	@for $d from 0 through 21 {
		$v: $d * 50;

		&-#{$v} {
			transition-duration: #{$v}ms;
		}
	}
}

.delay {
	@for $d from 0 through 21 {
		$v: $d * 50;

		&-#{$v} {
			transition-delay: #{$v}ms;
		}
	}
}

// Função de tempo da transição
.ease {
	&-linear {
		transition-timing-function: linear;
	}

	&-in {
		transition-timing-function: cubic-bezier(0.4, 0, 1, 1);
	}

	&-out {
		transition-timing-function: cubic-bezier(0, 0, 0.2, 1);
	}

	&-in-out {
		transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
	}
}

//* Escalas:
.scale {
	@for $s from 0 through 15 {
		$cn: $s * 10;
		$v: calc($cn / 100);

		&-#{$cn} {
			transform: scale(#{$v});

			&-neg {
				transform: scale(-#{$v});
			}
		}

	}
}

//* Opacidade:
.opacity {
	@for $o from 0 through 10 {
		$cn: $o * 10;
		$v: calc($cn / 100);

		&-#{$cn} {
			opacity: #{$v};
		}
	}
}

@include mix.responsive(){
	.mob\:opacity {
		@for $o from 0 through 10 {
            $cn: $o * 10;
            $v: calc($cn / 100);

            &-#{$cn} {
                opacity: #{$v};
            }
        }
	}
}

//* Rotações:
.rotate {
	@for $r from 0 through 360 {
		&-#{$r} {
			transform: rotate(#{$r}deg);

			&-neg {
				transform: rotate(-#{$r}deg);
			}
		}

	}
}

@include mix.responsive(){
	.mob\:rotate {
        @for $r from 0 through 360 {
            &-#{$r} {
                transform: rotate(#{$r}deg);
            }
        }
    }
}

//* Translações:
.translate {
	@for $t from 0 through 20 {
		$v: $t * 5;

		&-x-#{$v} {
			transform: translateX(#{$v * 1%});

			&-neg {
				transform: translateX(-#{$v * 1%});
			}
		}

		&-y-#{$v} {
			transform: translateY(#{$v * 1%});

			&-neg {
				transform: translateY(-#{$v * 1%});
			}
		}
	}

	&-x-1\/3,
	&-x-33 {
		transform: translateX(33%);

		&-neg {
			transform: translateX(-33%);
		}
	}

	&-y-1\/3,
	&-y-33 {
		transform: translateY(33%);

		&-neg {
			transform: translateY(-33%);
		}
	}

	&-x-2\/3,
	&-x-66 {
		transform: translateX(66%);

		&-neg {
			transform: translateX(-66%);
		}
	}

	&-y-2\/3,
	&-y-66 {
		transform: translateY(66%);

		&-neg {
			transform: translateY(-66%);
		}
	}

	&-x-1\/2 {
		transform: translateX(50%);

		&-neg {
			transform: translateX(-50%);
		}
	}

	&-y-1\/2 {
		transform: translateY(50%);

		&-neg {
			transform: translateY(-50%);
		}
	}

	&-x-100,
	&-x-full {
		transform: translateX(100%);

		&-neg {
			transform: translateX(-100%);
		}
	}

	&-y-100,
	&-y-full {
		transform: translateY(100%);

		&-neg {
			transform: translateY(-100%);
		}
	}

	@for $t from 0 through 20 {
		&-x-#{$t}r {
			transform: translateX(#{$t * 1rem});

			&-neg {
				transform: translateX(-#{$t * 1rem});
			}
		}

		&-y-#{$t}r {
			transform: translateY(#{$t * 1rem});

			&-neg {
				transform: translateY(-#{$t * 1rem});
			}
		}
	}

	@for $t from 0 through 20 {
		&-x-#{$t}px {
			transform: translateX(#{$t * 1px});

			&-neg {
				transform: translateX(-#{$t * 1px});
			}
		}

		&-y-#{$t}px {
			transform: translateY(#{$t * 1px});

			&-neg {
				transform: translateY(-#{$t * 1px});
			}
		}
	}
}

@include mix.responsive(){
	.mob\:translate {
        @for $t from 0 through 20 {
			$v: $t * 5;

			&-x-#{$v} {
				transform: translateX(#{$v * 1%});

				&-neg {
					transform: translateX(-#{$v * 1%});
				}
			}

			&-y-#{$v} {
				transform: translateY(#{$v * 1%});

				&-neg {
					transform: translateY(-#{$v * 1%});
				}
			}
		}

		&-x-1\/3,
		&-x-33 {
			transform: translateX(33%);

			&-neg {
				transform: translateX(-33%);
			}
		}

		&-y-1\/3,
		&-y-33 {
			transform: translateY(33%);

			&-neg {
				transform: translateY(-33%);
			}
		}

		&-x-2\/3,
		&-x-66 {
			transform: translateX(66%);

			&-neg {
				transform: translateX(-66%);
			}
		}

		&-y-2\/3,
		&-y-66 {
			transform: translateY(66%);

			&-neg {
				transform: translateY(-66%);
			}
		}

		&-x-1\/2 {
			transform: translateX(50%);

			&-neg {
				transform: translateX(-50%);
			}
		}

		&-y-1\/2 {
			transform: translateY(50%);

			&-neg {
				transform: translateY(-50%);
			}
		}

		&-x-100,
		&-x-full {
			transform: translateX(100%);

			&-neg {
				transform: translateX(-100%);
			}
		}

		&-y-100,
		&-y-full {
			transform: translateY(100%);

			&-neg {
				transform: translateY(-100%);
			}
		}

		@for $t from 0 through 20 {
			&-x-#{$t}r {
				transform: translateX(#{$t * 1rem});

				&-neg {
					transform: translateX(-#{$t * 1rem});
				}
			}

			&-y-#{$t}r {
				transform: translateY(#{$t * 1rem});

				&-neg {
					transform: translateY(-#{$t * 1rem});
				}
			}
		}

		@for $t from 0 through 20 {
			&-x-#{$t}px {
				transform: translateX(#{$t * 1px});

				&-neg {
					transform: translateX(-#{$t * 1px});
				}
			}

			&-y-#{$t}px {
				transform: translateY(#{$t * 1px});

				&-neg {
					transform: translateY(-#{$t * 1px});
				}
			}
		}	
    }
}

//* Float:
.float {
	&-left,
	&-l {
		float: left;
	}

	&-right,
	&-r {
		float: right;
	}

	&-none,
	&-0 {
		float: none;
	}
}

@include mix.responsive() {
	.mob\:float {
		&-left {
			float: left;
		}

		&-right {
			float: right;
		}

		&-none {
			float: none;
		}
	}
}

.clear {
	clear: both;
}

@include mix.responsive() {
	.mob\:clear {
        clear: both;
    }
}

//? CONFIGURAÇÃO DE RESPONSIVIDADE:
//? --------------------------------------------------------------------------------------------------------//

.container {
	&-normal {
		container-type: normal;
	}

	&-inline {
		container-type: inline-size;
	}

	&-size {
		container-type: size;
	}
}

/* Classes que ocultam conteudo pelo tipo de tela: */
@media (min-width: 1024px) {
	.mobile {
		display: none !important;
	}
}

@media (min-width: 0px) and (max-width: 1023px) {
	.desktop {
		display: none !important;
	}
}
